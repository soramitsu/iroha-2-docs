import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.1293becd.js";const p="/iroha-2-docs/assets/iroha_java_hash.c677e97a.png",o="/iroha-2-docs/assets/iroha_java_commits.a73a8bf6.png",A=JSON.parse('{"title":"Kotlin/Java Guide","description":"","frontmatter":{},"headers":[],"relativePath":"guide/kotlin-java.md","filePath":"guide/kotlin-java.md","lastUpdated":1695725126000}'),e={name:"guide/kotlin-java.md"},t=l(`<h1 id="kotlin-java-guide" tabindex="-1">Kotlin/Java Guide <a class="header-anchor" href="#kotlin-java-guide" aria-label="Permalink to &quot;Kotlin/Java Guide&quot;">​</a></h1><h2 id="_1-iroha-2-client-setup" tabindex="-1">1. Iroha 2 Client Setup <a class="header-anchor" href="#_1-iroha-2-client-setup" aria-label="Permalink to &quot;1. Iroha 2 Client Setup&quot;">​</a></h2><p>In this part we shall cover the main things to look out for if you want to use Iroha 2 in your Kotlin application. Instead of providing the complete basics, we shall assume knowledge of the most widely used concepts, explain the unusual, and provide some instructions for creating your own Iroha 2-compatible client.</p><p>We assume that you know how to create a new package and have basic understanding of the fundamental Kotlin code. Specifically, we shall assume that you know how to build and deploy your program on the target platforms. To clone Iroha 2 JVM compatible SDKs, you can use <a href="https://github.com/hyperledger/iroha-java" target="_blank" rel="noreferrer">Iroha Java</a>.</p><p>Without further ado, here&#39;s a part of an example <code>build.gradle.kts</code> file, specifically, the <code>plugins</code>, <code>repositories</code> and <code>dependencies</code> sections:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">plugins</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">kotlin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;jvm&quot;</span><span style="color:#E1E4E8;">) version </span><span style="color:#9ECBFF;">&quot;1.6.10&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    application</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">group </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;jp.co.soramitsu&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">version </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;1.0-SNAPSHOT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">repositories</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">mavenCentral</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">maven</span><span style="color:#E1E4E8;">(url </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;https://jitpack.io&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">dependencies</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> iroha2Ver </span><span style="color:#F97583;">by</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">getProperties</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">implementation</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">implementation</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.6.0&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">api</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.github.hyperledger.iroha-java:admin-client:SNAPSHOT&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">implementation</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.github.hyperledger.iroha-java:model:SNAPSHOT&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">implementation</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.github.hyperledger.iroha-java:block:SNAPSHOT&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">implementation</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;net.i2p.crypto:eddsa:0.3.0&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">implementation</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;org.bouncycastle:bcprov-jdk15on:1.65&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">implementation</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;com.github.multiformats:java-multihash:1.3.0&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">plugins</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">kotlin</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;jvm&quot;</span><span style="color:#24292E;">) version </span><span style="color:#032F62;">&quot;1.6.10&quot;</span></span>
<span class="line"><span style="color:#24292E;">    application</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">group </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;jp.co.soramitsu&quot;</span></span>
<span class="line"><span style="color:#24292E;">version </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;1.0-SNAPSHOT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">repositories</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">mavenCentral</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">maven</span><span style="color:#24292E;">(url </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;https://jitpack.io&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">dependencies</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> iroha2Ver </span><span style="color:#D73A49;">by</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">getProperties</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">implementation</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">implementation</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.6.0&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">api</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.github.hyperledger.iroha-java:admin-client:SNAPSHOT&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">implementation</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.github.hyperledger.iroha-java:model:SNAPSHOT&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">implementation</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.github.hyperledger.iroha-java:block:SNAPSHOT&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">implementation</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;net.i2p.crypto:eddsa:0.3.0&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">implementation</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;org.bouncycastle:bcprov-jdk15on:1.65&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">implementation</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;com.github.multiformats:java-multihash:1.3.0&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>You <strong>should</strong> replace the SNAPSHOT in the above configuration with the latest <code>iroha-java</code> snapshot.</p><p>Snapshot versions match the Git commits. To get the latest snapshot, simply visit the <a href="https://github.com/hyperledger/iroha-java/tree/iroha2-dev" target="_blank" rel="noreferrer"><code>iroha-java</code></a> repository on the <code>iroha-2-dev</code> branch and copy the short hash of the last commit on the main page.</p><p><img src="`+p+'" alt=""></p><p>You can also check the <a href="https://github.com/hyperledger/iroha-java/commits/iroha2-dev" target="_blank" rel="noreferrer">commit history</a> and copy the commit hash of a previous commit.</p><p><img src="'+o+`" alt=""></p><p>This will give you the latest development release of Iroha 2.</p><h2 id="_2-configuring-iroha-2" tabindex="-1">2. Configuring Iroha 2 <a class="header-anchor" href="#_2-configuring-iroha-2" aria-label="Permalink to &quot;2. Configuring Iroha 2&quot;">​</a></h2><p>At present, the Kotlin SDK doesn&#39;t have any classes to interact with the configuration. Instead, you are provided with a ready-made <code>Iroha2Client</code> that reads the configuration from the environment variables and/or the resident <code>config.json</code> in the working directory.</p><p>If you are so inclined, you can have a look at the <code>testcontainers</code> module, and see how the <code>Iroha2Config</code> is implemented.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.testengine</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.DEFAULT_API_PORT</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.DEFAULT_P2P_PORT</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.DEFAULT_TELEMETRY_PORT</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.Genesis</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generateKeyPair</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.datamodel.peer.PeerId</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.toIrohaPublicKey</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">org.slf4j.LoggerFactory.getLogger</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">org.testcontainers.containers.Network</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">org.testcontainers.containers.Network.newNetwork</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">org.testcontainers.containers.output.OutputFrame</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">org.testcontainers.containers.output.Slf4jLogConsumer</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">org.testcontainers.images.ImagePullPolicy</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">org.testcontainers.images.PullPolicy</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">java.security.KeyPair</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">java.time.Duration</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">java.util.function.Consumer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Iroha configuration</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IrohaConfig</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> networkToJoin: </span><span style="color:#B392F0;">Network</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">newNetwork</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> logConsumer: </span><span style="color:#B392F0;">Consumer</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">OutputFrame</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Slf4jLogConsumer</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(IrohaContainer::</span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">.java)),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> genesis: </span><span style="color:#B392F0;">Genesis</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Genesis.</span><span style="color:#B392F0;">getEmpty</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> imageTag: </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> IrohaContainer.DEFAULT_IMAGE_TAG,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> imageName: </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> IrohaContainer.DEFAULT_IMAGE_NAME,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> pullPolicy: </span><span style="color:#B392F0;">ImagePullPolicy</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> PullPolicy.</span><span style="color:#B392F0;">ageBased</span><span style="color:#E1E4E8;">(Duration.</span><span style="color:#B392F0;">ofMinutes</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> alias: </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> IrohaContainer.NETWORK_ALIAS </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> DEFAULT_P2P_PORT,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> keyPair: </span><span style="color:#B392F0;">KeyPair</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateKeyPair</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> trustedPeers: </span><span style="color:#B392F0;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">PeerId</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">listOf</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">PeerId</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">$alias</span><span style="color:#9ECBFF;">:</span><span style="color:#79B8FF;">$DEFAULT_P2P_PORT</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            keyPair.</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toIrohaPublicKey</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"><span style="color:#E1E4E8;">    ),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> ports: </span><span style="color:#B392F0;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Int</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">listOf</span><span style="color:#E1E4E8;">(DEFAULT_P2P_PORT, DEFAULT_API_PORT, DEFAULT_TELEMETRY_PORT),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> shouldCloseNetwork: </span><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> waitStrategy: </span><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> submitGenesis: </span><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">companion</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">object</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> P2P_PORT_IDX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> API_PORT_IDX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> TELEMETRY_PORT_IDX </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.testengine</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.DEFAULT_API_PORT</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.DEFAULT_P2P_PORT</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.DEFAULT_TELEMETRY_PORT</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.Genesis</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generateKeyPair</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.datamodel.peer.PeerId</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.toIrohaPublicKey</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">org.slf4j.LoggerFactory.getLogger</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">org.testcontainers.containers.Network</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">org.testcontainers.containers.Network.newNetwork</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">org.testcontainers.containers.output.OutputFrame</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">org.testcontainers.containers.output.Slf4jLogConsumer</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">org.testcontainers.images.ImagePullPolicy</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">org.testcontainers.images.PullPolicy</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">java.security.KeyPair</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">java.time.Duration</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">java.util.function.Consumer</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Iroha configuration</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IrohaConfig</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> networkToJoin: </span><span style="color:#6F42C1;">Network</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">newNetwork</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> logConsumer: </span><span style="color:#6F42C1;">Consumer</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">OutputFrame</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Slf4jLogConsumer</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(IrohaContainer::</span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">.java)),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> genesis: </span><span style="color:#6F42C1;">Genesis</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Genesis.</span><span style="color:#6F42C1;">getEmpty</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> imageTag: </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IrohaContainer.DEFAULT_IMAGE_TAG,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> imageName: </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IrohaContainer.DEFAULT_IMAGE_NAME,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> pullPolicy: </span><span style="color:#6F42C1;">ImagePullPolicy</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> PullPolicy.</span><span style="color:#6F42C1;">ageBased</span><span style="color:#24292E;">(Duration.</span><span style="color:#6F42C1;">ofMinutes</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> alias: </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> IrohaContainer.NETWORK_ALIAS </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> DEFAULT_P2P_PORT,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> keyPair: </span><span style="color:#6F42C1;">KeyPair</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateKeyPair</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> trustedPeers: </span><span style="color:#6F42C1;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">PeerId</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">listOf</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">PeerId</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">$alias</span><span style="color:#032F62;">:</span><span style="color:#005CC5;">$DEFAULT_P2P_PORT</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            keyPair.</span><span style="color:#D73A49;">public</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toIrohaPublicKey</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"><span style="color:#24292E;">    ),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> ports: </span><span style="color:#6F42C1;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Int</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">listOf</span><span style="color:#24292E;">(DEFAULT_P2P_PORT, DEFAULT_API_PORT, DEFAULT_TELEMETRY_PORT),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> shouldCloseNetwork: </span><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> waitStrategy: </span><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> submitGenesis: </span><span style="color:#6F42C1;">Boolean</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">companion</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">object</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> P2P_PORT_IDX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> API_PORT_IDX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> TELEMETRY_PORT_IDX </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="_3-querying-and-registering-domains" tabindex="-1">3. Querying and Registering Domains <a class="header-anchor" href="#_3-querying-and-registering-domains" aria-label="Permalink to &quot;3. Querying and Registering Domains&quot;">​</a></h2><p>Querying and Registering a domain are easier operations. The usual boilerplate code, that often only serves to instantiate a client from an on-disk configuration file, is unnecessary. We will immediately add all the necessary imports to implement this client:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.</span><span style="color:#79B8FF;">*</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.crypto.PublicKey</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.datamodel.Value</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.datamodel.account.AccountId</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.datamodel.asset.AssetValue</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.datamodel.asset.AssetValueType</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.datamodel.asset.Mintable</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.datamodel.metadata.Metadata</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.datamodel.name.Name</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.datamodel.predicate.GenericValuePredicateBox</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.datamodel.predicate.value.ValuePredicate</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.query.QueryBuilder</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">kotlinx.coroutines.runBlocking</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">kotlinx.coroutines.withTimeout</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">java.net.URL</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">java.security.KeyPair</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.</span><span style="color:#005CC5;">*</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.crypto.PublicKey</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.datamodel.Value</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.datamodel.account.AccountId</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.datamodel.asset.AssetValue</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.datamodel.asset.AssetValueType</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.datamodel.asset.Mintable</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.datamodel.metadata.Metadata</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.datamodel.name.Name</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.datamodel.predicate.GenericValuePredicateBox</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.datamodel.predicate.value.ValuePredicate</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.query.QueryBuilder</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">kotlinx.coroutines.runBlocking</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">kotlinx.coroutines.withTimeout</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">java.net.URL</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">java.security.KeyPair</span></span></code></pre></div><p>We shall write this example in the form of a test class, hence the presence of test-related packages. Note the presence of <code>coroutines.runBlocking</code>. Iroha makes extensive use of asynchronous programming (in Rust terminology), hence blocking is not necessarily the only mode of interaction with the Iroha 2 code.</p><p>In order to make sure that the raised peers work correctly, you can do a simple operation to get all registered domains.</p><p>Next, we will add wrappers to the classes created in this section.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(args: </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">&gt;): </span><span style="color:#B392F0;">Unit</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runBlocking</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> peerUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://127.0.0.1:8080&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> telemetryUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://127.0.0.1:8180&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> admin </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountId</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;bob&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">asName</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;wonderland&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">asDomainId</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> adminKeyPair </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">keyPairFromHex</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;7233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;9ac47abf59b356e0bd7dcbbbb4dec080e302156a48ca907e47cb6aea1d32719e&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> client </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AdminIroha2Client</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(peerUrl), </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(telemetryUrl), log </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> query </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Query</span><span style="color:#E1E4E8;">(client, admin, adminKeyPair)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    query.</span><span style="color:#B392F0;">findAllDomains</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ALL DOMAINS: \${it.</span><span style="color:#B392F0;">map</span><span style="color:#9ECBFF;"> { d </span><span style="color:#F97583;">-&gt;</span><span style="color:#9ECBFF;"> d.id.</span><span style="color:#B392F0;">asString</span><span style="color:#9ECBFF;">() }}&quot;</span><span style="color:#E1E4E8;">) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">open</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Query</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> client: </span><span style="color:#B392F0;">AdminIroha2Client</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> admin: </span><span style="color:#B392F0;">AccountId</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> keyPair: </span><span style="color:#B392F0;">KeyPair</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">suspend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findAllDomains</span><span style="color:#E1E4E8;">(queryFilter: </span><span style="color:#B392F0;">GenericValuePredicateBox</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ValuePredicate</span><span style="color:#E1E4E8;">&gt;? </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> QueryBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">findAllDomains</span><span style="color:#E1E4E8;">(queryFilter)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(admin)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(keyPair)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">let</span><span style="color:#E1E4E8;"> { client.</span><span style="color:#B392F0;">sendQuery</span><span style="color:#E1E4E8;">(it) }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">fun</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(args: </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">&gt;): </span><span style="color:#6F42C1;">Unit</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runBlocking</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> peerUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://127.0.0.1:8080&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> telemetryUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://127.0.0.1:8180&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> admin </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountId</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;bob&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">asName</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;wonderland&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">asDomainId</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> adminKeyPair </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">keyPairFromHex</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;7233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;9ac47abf59b356e0bd7dcbbbb4dec080e302156a48ca907e47cb6aea1d32719e&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> client </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AdminIroha2Client</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(peerUrl), </span><span style="color:#6F42C1;">URL</span><span style="color:#24292E;">(telemetryUrl), log </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> query </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Query</span><span style="color:#24292E;">(client, admin, adminKeyPair)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    query.</span><span style="color:#6F42C1;">findAllDomains</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ALL DOMAINS: \${it.</span><span style="color:#6F42C1;">map</span><span style="color:#032F62;"> { d </span><span style="color:#D73A49;">-&gt;</span><span style="color:#032F62;"> d.id.</span><span style="color:#6F42C1;">asString</span><span style="color:#032F62;">() }}&quot;</span><span style="color:#24292E;">) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">open</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Query</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> client: </span><span style="color:#6F42C1;">AdminIroha2Client</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> admin: </span><span style="color:#6F42C1;">AccountId</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> keyPair: </span><span style="color:#6F42C1;">KeyPair</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">suspend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fun</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findAllDomains</span><span style="color:#24292E;">(queryFilter: </span><span style="color:#6F42C1;">GenericValuePredicateBox</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">ValuePredicate</span><span style="color:#24292E;">&gt;? </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> QueryBuilder</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">findAllDomains</span><span style="color:#24292E;">(queryFilter)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(admin)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(keyPair)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">let</span><span style="color:#24292E;"> { client.</span><span style="color:#6F42C1;">sendQuery</span><span style="color:#24292E;">(it) }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The output in the terminal will contain a list of all domains that are currently registered.</p><details class="details custom-block"><summary>Expand to see the expected output</summary><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">ALL DOMAINS: [wonderland, genesis, garden_of_live_flowers]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">ALL DOMAINS: [wonderland, genesis, garden_of_live_flowers]</span></span></code></pre></div></details><p>To register a new domain, add the following lines to Main.kt:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> sendTransaction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SendTransaction</span><span style="color:#E1E4E8;">(client, admin, adminKeyPair)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> domain </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;looking_glass_\${System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#9ECBFF;">()}&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    sendTransaction.</span><span style="color:#B392F0;">registerDomain</span><span style="color:#E1E4E8;">(domain).</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;DOMAIN </span><span style="color:#79B8FF;">$domain</span><span style="color:#9ECBFF;"> CREATED&quot;</span><span style="color:#E1E4E8;">) }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">val</span><span style="color:#24292E;"> sendTransaction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SendTransaction</span><span style="color:#24292E;">(client, admin, adminKeyPair)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">val</span><span style="color:#24292E;"> domain </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;looking_glass_\${System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#032F62;">()}&quot;</span></span>
<span class="line"><span style="color:#24292E;">    sendTransaction.</span><span style="color:#6F42C1;">registerDomain</span><span style="color:#24292E;">(domain).</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;DOMAIN </span><span style="color:#005CC5;">$domain</span><span style="color:#032F62;"> CREATED&quot;</span><span style="color:#24292E;">) }</span></span></code></pre></div><p>Then create new open class <code>SendTransaction</code> in your project:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">open</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SendTransaction</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> client: </span><span style="color:#B392F0;">AdminIroha2Client</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> admin: </span><span style="color:#B392F0;">AccountId</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> keyPair: </span><span style="color:#B392F0;">KeyPair</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                            </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> timeout: </span><span style="color:#B392F0;">Long</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">suspend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerDomain</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        id: </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        metadata: </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Name</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mapOf</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        admin: </span><span style="color:#B392F0;">AccountId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.admin,</span></span>
<span class="line"><span style="color:#E1E4E8;">        keyPair: </span><span style="color:#B392F0;">KeyPair</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.keyPair</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">sendTransaction</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(admin)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">registerDomain</span><span style="color:#E1E4E8;">(id.</span><span style="color:#B392F0;">asDomainId</span><span style="color:#E1E4E8;">(), metadata)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(keyPair)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }.</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">withTimeout</span><span style="color:#E1E4E8;">(timeout) { it.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">() }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">open</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SendTransaction</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> client: </span><span style="color:#6F42C1;">AdminIroha2Client</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> admin: </span><span style="color:#6F42C1;">AccountId</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> keyPair: </span><span style="color:#6F42C1;">KeyPair</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                            </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> timeout: </span><span style="color:#6F42C1;">Long</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">suspend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fun</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerDomain</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        id: </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        metadata: </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Name</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapOf</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">        admin: </span><span style="color:#6F42C1;">AccountId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.admin,</span></span>
<span class="line"><span style="color:#24292E;">        keyPair: </span><span style="color:#6F42C1;">KeyPair</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.keyPair</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">sendTransaction</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(admin)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">registerDomain</span><span style="color:#24292E;">(id.</span><span style="color:#6F42C1;">asDomainId</span><span style="color:#24292E;">(), metadata)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(keyPair)</span></span>
<span class="line"><span style="color:#24292E;">        }.</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">withTimeout</span><span style="color:#24292E;">(timeout) { it.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">() }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><details class="details custom-block"><summary>Expand to see the expected output</summary><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">DOMAIN looking_glass CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ALL DOMAINS: [looking_glass, garden_of_live_flowers, genesis, wonderland]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">DOMAIN looking_glass CREATED</span></span>
<span class="line"><span style="color:#24292e;">ALL DOMAINS: [looking_glass, garden_of_live_flowers, genesis, wonderland]</span></span></code></pre></div></details><h2 id="_4-registering-an-account" tabindex="-1">4. Registering an Account <a class="header-anchor" href="#_4-registering-an-account" aria-label="Permalink to &quot;4. Registering an Account&quot;">​</a></h2><p>Registering an account is more involved than the aforementioned functions. Previously, we only had to worry about submitting a single instruction, with a single string-based registration box (in Rust terminology, the heap-allocated reference types are all called boxes).</p><p>When registering an account, there are a few more variables. The account can only be registered to an existing domain. Also, an account typically has to have a key pair.</p><p>To register a new account, add the following lines to <code>Main.kt</code>:</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> madHatter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;madHatter_\${System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#9ECBFF;">()}</span><span style="color:#79B8FF;">$ACCOUNT_ID_DELIMITER$domain</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> madHatterKeyPair </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateKeyPair</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    sendTransaction.</span><span style="color:#B392F0;">registerAccount</span><span style="color:#E1E4E8;">(madHatter, </span><span style="color:#B392F0;">listOf</span><span style="color:#E1E4E8;">(madHatterKeyPair.</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toIrohaPublicKey</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ACCOUNT </span><span style="color:#79B8FF;">$madHatter</span><span style="color:#9ECBFF;"> CREATED&quot;</span><span style="color:#E1E4E8;">) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    query.</span><span style="color:#B392F0;">findAllAccounts</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ALL ACCOUNTS: \${it.</span><span style="color:#B392F0;">map</span><span style="color:#9ECBFF;"> { a </span><span style="color:#F97583;">-&gt;</span><span style="color:#9ECBFF;"> a.id.</span><span style="color:#B392F0;">asString</span><span style="color:#9ECBFF;">() }}&quot;</span><span style="color:#E1E4E8;">) }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">val</span><span style="color:#24292E;"> madHatter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;madHatter_\${System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#032F62;">()}</span><span style="color:#005CC5;">$ACCOUNT_ID_DELIMITER$domain</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> madHatterKeyPair </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateKeyPair</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    sendTransaction.</span><span style="color:#6F42C1;">registerAccount</span><span style="color:#24292E;">(madHatter, </span><span style="color:#6F42C1;">listOf</span><span style="color:#24292E;">(madHatterKeyPair.</span><span style="color:#D73A49;">public</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toIrohaPublicKey</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ACCOUNT </span><span style="color:#005CC5;">$madHatter</span><span style="color:#032F62;"> CREATED&quot;</span><span style="color:#24292E;">) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    query.</span><span style="color:#6F42C1;">findAllAccounts</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ALL ACCOUNTS: \${it.</span><span style="color:#6F42C1;">map</span><span style="color:#032F62;"> { a </span><span style="color:#D73A49;">-&gt;</span><span style="color:#032F62;"> a.id.</span><span style="color:#6F42C1;">asString</span><span style="color:#032F62;">() }}&quot;</span><span style="color:#24292E;">) }</span></span></code></pre></div><p>Then implement new method for class <code>SendTransaction</code> in your project.</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">suspend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerAccount</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        id: </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        signatories: </span><span style="color:#B392F0;">List</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">PublicKey</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">        metadata: </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Name</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mapOf</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        admin: </span><span style="color:#B392F0;">AccountId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.admin,</span></span>
<span class="line"><span style="color:#E1E4E8;">        keyPair: </span><span style="color:#B392F0;">KeyPair</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.keyPair</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">sendTransaction</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(admin)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">registerAccount</span><span style="color:#E1E4E8;">(id.</span><span style="color:#B392F0;">asAccountId</span><span style="color:#E1E4E8;">(), signatories, </span><span style="color:#B392F0;">Metadata</span><span style="color:#E1E4E8;">(metadata))</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(keyPair)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }.</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">withTimeout</span><span style="color:#E1E4E8;">(timeout) { it.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">() }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">suspend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fun</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerAccount</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        id: </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        signatories: </span><span style="color:#6F42C1;">List</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">PublicKey</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"><span style="color:#24292E;">        metadata: </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Name</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapOf</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">        admin: </span><span style="color:#6F42C1;">AccountId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.admin,</span></span>
<span class="line"><span style="color:#24292E;">        keyPair: </span><span style="color:#6F42C1;">KeyPair</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.keyPair</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">sendTransaction</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(admin)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">registerAccount</span><span style="color:#24292E;">(id.</span><span style="color:#6F42C1;">asAccountId</span><span style="color:#24292E;">(), signatories, </span><span style="color:#6F42C1;">Metadata</span><span style="color:#24292E;">(metadata))</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(keyPair)</span></span>
<span class="line"><span style="color:#24292E;">        }.</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">withTimeout</span><span style="color:#24292E;">(timeout) { it.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">() }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>Also, a new method has been added to the <code>Query</code> class.</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">suspend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findAllAccounts</span><span style="color:#E1E4E8;">(queryFilter: </span><span style="color:#B392F0;">GenericValuePredicateBox</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ValuePredicate</span><span style="color:#E1E4E8;">&gt;? </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> QueryBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">findAllAccounts</span><span style="color:#E1E4E8;">(queryFilter)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(admin)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(keyPair)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">let</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            client.</span><span style="color:#B392F0;">sendQuery</span><span style="color:#E1E4E8;">(it)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">suspend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fun</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findAllAccounts</span><span style="color:#24292E;">(queryFilter: </span><span style="color:#6F42C1;">GenericValuePredicateBox</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">ValuePredicate</span><span style="color:#24292E;">&gt;? </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> QueryBuilder</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">findAllAccounts</span><span style="color:#24292E;">(queryFilter)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(admin)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(keyPair)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">let</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            client.</span><span style="color:#6F42C1;">sendQuery</span><span style="color:#24292E;">(it)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><details class="details custom-block"><summary>Expand to see the expected output</summary><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">DOMAIN looking_glass_1684835731653 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ALL DOMAINS: [looking_glass, garden_of_live_flowers, genesis, wonderland, looking_glass_1684835731653]</span></span>
<span class="line"><span style="color:#e1e4e8;">ACCOUNT madHatter_1684835733686@looking_glass_1684835731653 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ALL ACCOUNTS: [carpenter@garden_of_live_flowers, genesis@genesis, alice@wonderland, bob@wonderland, madHatter_1684835733686@looking_glass_1684835731653]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">DOMAIN looking_glass_1684835731653 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ALL DOMAINS: [looking_glass, garden_of_live_flowers, genesis, wonderland, looking_glass_1684835731653]</span></span>
<span class="line"><span style="color:#24292e;">ACCOUNT madHatter_1684835733686@looking_glass_1684835731653 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ALL ACCOUNTS: [carpenter@garden_of_live_flowers, genesis@genesis, alice@wonderland, bob@wonderland, madHatter_1684835733686@looking_glass_1684835731653]</span></span></code></pre></div></details><p>As you can see, for <em>illustrative purposes</em>, we have generated a new key-pair. We converted that key-pair into an Iroha-compatible format using <code>toIrohaPublicKey</code>, and added the public key to the instruction to register an account.</p><h2 id="_5-registering-and-minting-assets" tabindex="-1">5. Registering and minting assets <a class="header-anchor" href="#_5-registering-and-minting-assets" aria-label="Permalink to &quot;5. Registering and minting assets&quot;">​</a></h2><p>Iroha has been built with few <a href="./blockchain/assets.html">underlying assumptions</a> about what the assets need to be in terms of their value type and characteristics (fungible or non-fungible, mintable or non-mintable).</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>The non-mintable assets are a relatively recent addition to Iroha 2, thus registering and minting such assets is not presently possible through the Kotlin SDK.</p></div><p>To register new assets definition, add the following lines of code to <code>main</code></p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> assetDefinition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;asset_time_\${System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#9ECBFF;">()}</span><span style="color:#79B8FF;">$ASSET_ID_DELIMITER$domain</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    sendTransaction.</span><span style="color:#B392F0;">registerAssetDefinition</span><span style="color:#E1E4E8;">(assetDefinition, AssetValueType.</span><span style="color:#B392F0;">Quantity</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ASSET DEFINITION </span><span style="color:#79B8FF;">$assetDefinition</span><span style="color:#9ECBFF;"> CREATED&quot;</span><span style="color:#E1E4E8;">) }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">val</span><span style="color:#24292E;"> assetDefinition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;asset_time_\${System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#032F62;">()}</span><span style="color:#005CC5;">$ASSET_ID_DELIMITER$domain</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    sendTransaction.</span><span style="color:#6F42C1;">registerAssetDefinition</span><span style="color:#24292E;">(assetDefinition, AssetValueType.</span><span style="color:#6F42C1;">Quantity</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ASSET DEFINITION </span><span style="color:#005CC5;">$assetDefinition</span><span style="color:#032F62;"> CREATED&quot;</span><span style="color:#24292E;">) }</span></span></code></pre></div><p>Then implement new method for class <code>SendTransaction</code> in your project.</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">suspend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerAssetDefinition</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        id: </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#B392F0;">AssetValueType</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> AssetValueType.</span><span style="color:#B392F0;">Store</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        metadata: </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Name</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Value</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mapOf</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        mintable: </span><span style="color:#B392F0;">Mintable</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Mintable.</span><span style="color:#B392F0;">Infinitely</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        admin: </span><span style="color:#B392F0;">AccountId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.admin,</span></span>
<span class="line"><span style="color:#E1E4E8;">        keyPair: </span><span style="color:#B392F0;">KeyPair</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.keyPair</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">sendTransaction</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(admin)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">registerAssetDefinition</span><span style="color:#E1E4E8;">(id.</span><span style="color:#B392F0;">asAssetDefinitionId</span><span style="color:#E1E4E8;">(), type, </span><span style="color:#B392F0;">Metadata</span><span style="color:#E1E4E8;">(metadata), mintable)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(keyPair)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }.</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">withTimeout</span><span style="color:#E1E4E8;">(timeout) { it.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">() }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">suspend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fun</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerAssetDefinition</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        id: </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        type: </span><span style="color:#6F42C1;">AssetValueType</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> AssetValueType.</span><span style="color:#6F42C1;">Store</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">        metadata: </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Name</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Value</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapOf</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">        mintable: </span><span style="color:#6F42C1;">Mintable</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Mintable.</span><span style="color:#6F42C1;">Infinitely</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">        admin: </span><span style="color:#6F42C1;">AccountId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.admin,</span></span>
<span class="line"><span style="color:#24292E;">        keyPair: </span><span style="color:#6F42C1;">KeyPair</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.keyPair</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">sendTransaction</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(admin)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">registerAssetDefinition</span><span style="color:#24292E;">(id.</span><span style="color:#6F42C1;">asAssetDefinitionId</span><span style="color:#24292E;">(), type, </span><span style="color:#6F42C1;">Metadata</span><span style="color:#24292E;">(metadata), mintable)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(keyPair)</span></span>
<span class="line"><span style="color:#24292E;">        }.</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">withTimeout</span><span style="color:#24292E;">(timeout) { it.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">() }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>To mint new assets, add the following lines of code to <code>main</code></p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> madHatterAsset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">$assetDefinition$ASSET_ID_DELIMITER$madHatter</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    sendTransaction.</span><span style="color:#B392F0;">registerAsset</span><span style="color:#E1E4E8;">(madHatterAsset, AssetValue.</span><span style="color:#B392F0;">Quantity</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ASSET </span><span style="color:#79B8FF;">$madHatterAsset</span><span style="color:#9ECBFF;"> CREATED&quot;</span><span style="color:#E1E4E8;">) }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">val</span><span style="color:#24292E;"> madHatterAsset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">$assetDefinition$ASSET_ID_DELIMITER$madHatter</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    sendTransaction.</span><span style="color:#6F42C1;">registerAsset</span><span style="color:#24292E;">(madHatterAsset, AssetValue.</span><span style="color:#6F42C1;">Quantity</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ASSET </span><span style="color:#005CC5;">$madHatterAsset</span><span style="color:#032F62;"> CREATED&quot;</span><span style="color:#24292E;">) }</span></span></code></pre></div><p>Then implement new method for class <code>SendTransaction</code> in your project.</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">suspend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerAsset</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        id: </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">AssetValue</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        admin: </span><span style="color:#B392F0;">AccountId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.admin,</span></span>
<span class="line"><span style="color:#E1E4E8;">        keyPair: </span><span style="color:#B392F0;">KeyPair</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.keyPair</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">sendTransaction</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(admin)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">registerAsset</span><span style="color:#E1E4E8;">(id.</span><span style="color:#B392F0;">asAssetId</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">value</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(keyPair)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }.</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">withTimeout</span><span style="color:#E1E4E8;">(timeout) { it.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">() }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">suspend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fun</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerAsset</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        id: </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">value</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">AssetValue</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        admin: </span><span style="color:#6F42C1;">AccountId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.admin,</span></span>
<span class="line"><span style="color:#24292E;">        keyPair: </span><span style="color:#6F42C1;">KeyPair</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.keyPair</span></span>
<span class="line"><span style="color:#24292E;">        ) {</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">sendTransaction</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(admin)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">registerAsset</span><span style="color:#24292E;">(id.</span><span style="color:#6F42C1;">asAssetId</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">value</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(keyPair)</span></span>
<span class="line"><span style="color:#24292E;">        }.</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">withTimeout</span><span style="color:#24292E;">(timeout) { it.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">() }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span></code></pre></div><p>To check the result, add the following line of code to the class <code>main</code></p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">query.</span><span style="color:#B392F0;">findAllAssets</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ALL ASSETS: \${it.</span><span style="color:#B392F0;">map</span><span style="color:#9ECBFF;"> { a </span><span style="color:#F97583;">-&gt;</span><span style="color:#9ECBFF;"> a.id.</span><span style="color:#B392F0;">asString</span><span style="color:#9ECBFF;">() }}&quot;</span><span style="color:#E1E4E8;">) }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">query.</span><span style="color:#6F42C1;">findAllAssets</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ALL ASSETS: \${it.</span><span style="color:#6F42C1;">map</span><span style="color:#032F62;"> { a </span><span style="color:#D73A49;">-&gt;</span><span style="color:#032F62;"> a.id.</span><span style="color:#6F42C1;">asString</span><span style="color:#032F62;">() }}&quot;</span><span style="color:#24292E;">) }</span></span></code></pre></div><p>Also, a new method has been added to the <code>open class Query</code></p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">suspend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">findAllAssets</span><span style="color:#E1E4E8;">(queryFilter: </span><span style="color:#B392F0;">GenericValuePredicateBox</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ValuePredicate</span><span style="color:#E1E4E8;">&gt;? </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> QueryBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">findAllAssets</span><span style="color:#E1E4E8;">(queryFilter)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(admin)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(keyPair)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">let</span><span style="color:#E1E4E8;"> { client.</span><span style="color:#B392F0;">sendQuery</span><span style="color:#E1E4E8;">(it) }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">suspend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fun</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">findAllAssets</span><span style="color:#24292E;">(queryFilter: </span><span style="color:#6F42C1;">GenericValuePredicateBox</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">ValuePredicate</span><span style="color:#24292E;">&gt;? </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> QueryBuilder</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">findAllAssets</span><span style="color:#24292E;">(queryFilter)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(admin)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(keyPair)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">let</span><span style="color:#24292E;"> { client.</span><span style="color:#6F42C1;">sendQuery</span><span style="color:#24292E;">(it) }</span></span></code></pre></div><details class="details custom-block"><summary>Expand to see the expected output</summary><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">DOMAIN looking_glass_1684842996549 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ALL DOMAINS: [looking_glass, garden_of_live_flowers, genesis, looking_glass_1684842996549, wonderland, looking_glass_1684835731653]</span></span>
<span class="line"><span style="color:#e1e4e8;">ACCOUNT madHatter_1684842997930@looking_glass_1684842996549 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ALL ACCOUNTS: [carpenter@garden_of_live_flowers, genesis@genesis, madHatter_1684842997930@looking_glass_1684842996549, alice@wonderland, bob@wonderland, madHatter_1684835733686@looking_glass_1684835731653]</span></span>
<span class="line"><span style="color:#e1e4e8;">ASSET DEFINITION asset_time_1684842998891#looking_glass_1684842996549 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ASSET asset_time_1684842998891#looking_glass_1684842996549#madHatter_1684842997930@looking_glass_1684842996549 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ALL ASSETS: [asset_time_1684842998891#looking_glass_1684842996549#madHatter_1684842997930@looking_glass_1684842996549, cabbage#garden_of_live_flowers#alice@wonderland, rose#wonderland#alice@wonderland]\`\`\`</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">DOMAIN looking_glass_1684842996549 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ALL DOMAINS: [looking_glass, garden_of_live_flowers, genesis, looking_glass_1684842996549, wonderland, looking_glass_1684835731653]</span></span>
<span class="line"><span style="color:#24292e;">ACCOUNT madHatter_1684842997930@looking_glass_1684842996549 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ALL ACCOUNTS: [carpenter@garden_of_live_flowers, genesis@genesis, madHatter_1684842997930@looking_glass_1684842996549, alice@wonderland, bob@wonderland, madHatter_1684835733686@looking_glass_1684835731653]</span></span>
<span class="line"><span style="color:#24292e;">ASSET DEFINITION asset_time_1684842998891#looking_glass_1684842996549 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ASSET asset_time_1684842998891#looking_glass_1684842996549#madHatter_1684842997930@looking_glass_1684842996549 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ALL ASSETS: [asset_time_1684842998891#looking_glass_1684842996549#madHatter_1684842997930@looking_glass_1684842996549, cabbage#garden_of_live_flowers#alice@wonderland, rose#wonderland#alice@wonderland]\`\`\`</span></span></code></pre></div></details><h2 id="_6-transferring-assets" tabindex="-1">6. Transferring assets <a class="header-anchor" href="#_6-transferring-assets" aria-label="Permalink to &quot;6. Transferring assets&quot;">​</a></h2><p>After we have registered and minted madHatter&#39;s assets, let&#39;s transfer some of them to another blockchain user. To do this, we will create a new user, register their asset with the <code>main</code> method and add transfer operations for the asset.</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> whiteRabbit </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;whiteRabbit_\${System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#9ECBFF;">()}</span><span style="color:#79B8FF;">$ACCOUNT_ID_DELIMITER$domain</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> whiteRabbitKeyPair </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateKeyPair</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    sendTransaction.</span><span style="color:#B392F0;">registerAccount</span><span style="color:#E1E4E8;">(whiteRabbit, </span><span style="color:#B392F0;">listOf</span><span style="color:#E1E4E8;">(whiteRabbitKeyPair.</span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">toIrohaPublicKey</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ACCOUNT </span><span style="color:#79B8FF;">$whiteRabbit</span><span style="color:#9ECBFF;"> CREATED&quot;</span><span style="color:#E1E4E8;">) }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> whiteRabbitAsset </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">$assetDefinition$ASSET_ID_DELIMITER$whiteRabbit</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    sendTransaction.</span><span style="color:#B392F0;">registerAsset</span><span style="color:#E1E4E8;">(whiteRabbitAsset, AssetValue.</span><span style="color:#B392F0;">Quantity</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ASSET </span><span style="color:#79B8FF;">$whiteRabbitAsset</span><span style="color:#9ECBFF;"> CREATED&quot;</span><span style="color:#E1E4E8;">) }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    sendTransaction.</span><span style="color:#B392F0;">transferAsset</span><span style="color:#E1E4E8;">(madHatterAsset, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, whiteRabbitAsset, madHatter.</span><span style="color:#B392F0;">asAccountId</span><span style="color:#E1E4E8;">(), madHatterKeyPair)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">$madHatter</span><span style="color:#9ECBFF;"> TRANSFERRED FROM </span><span style="color:#79B8FF;">$madHatterAsset</span><span style="color:#9ECBFF;"> TO </span><span style="color:#79B8FF;">$whiteRabbitAsset</span><span style="color:#9ECBFF;">: 10&quot;</span><span style="color:#E1E4E8;">) }</span></span>
<span class="line"><span style="color:#E1E4E8;">    query.</span><span style="color:#B392F0;">getAccountAmount</span><span style="color:#E1E4E8;">(madHatter, madHatterAsset).</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">$madHatterAsset</span><span style="color:#9ECBFF;"> BALANCE: </span><span style="color:#79B8FF;">$it</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">) }</span></span>
<span class="line"><span style="color:#E1E4E8;">    query.</span><span style="color:#B392F0;">getAccountAmount</span><span style="color:#E1E4E8;">(whiteRabbit, whiteRabbitAsset).</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">$whiteRabbitAsset</span><span style="color:#9ECBFF;"> BALANCE: </span><span style="color:#79B8FF;">$it</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">) }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">val</span><span style="color:#24292E;"> whiteRabbit </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;whiteRabbit_\${System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#032F62;">()}</span><span style="color:#005CC5;">$ACCOUNT_ID_DELIMITER$domain</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> whiteRabbitKeyPair </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateKeyPair</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    sendTransaction.</span><span style="color:#6F42C1;">registerAccount</span><span style="color:#24292E;">(whiteRabbit, </span><span style="color:#6F42C1;">listOf</span><span style="color:#24292E;">(whiteRabbitKeyPair.</span><span style="color:#D73A49;">public</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">toIrohaPublicKey</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ACCOUNT </span><span style="color:#005CC5;">$whiteRabbit</span><span style="color:#032F62;"> CREATED&quot;</span><span style="color:#24292E;">) }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">val</span><span style="color:#24292E;"> whiteRabbitAsset </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">$assetDefinition$ASSET_ID_DELIMITER$whiteRabbit</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    sendTransaction.</span><span style="color:#6F42C1;">registerAsset</span><span style="color:#24292E;">(whiteRabbitAsset, AssetValue.</span><span style="color:#6F42C1;">Quantity</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ASSET </span><span style="color:#005CC5;">$whiteRabbitAsset</span><span style="color:#032F62;"> CREATED&quot;</span><span style="color:#24292E;">) }</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    sendTransaction.</span><span style="color:#6F42C1;">transferAsset</span><span style="color:#24292E;">(madHatterAsset, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, whiteRabbitAsset, madHatter.</span><span style="color:#6F42C1;">asAccountId</span><span style="color:#24292E;">(), madHatterKeyPair)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">$madHatter</span><span style="color:#032F62;"> TRANSFERRED FROM </span><span style="color:#005CC5;">$madHatterAsset</span><span style="color:#032F62;"> TO </span><span style="color:#005CC5;">$whiteRabbitAsset</span><span style="color:#032F62;">: 10&quot;</span><span style="color:#24292E;">) }</span></span>
<span class="line"><span style="color:#24292E;">    query.</span><span style="color:#6F42C1;">getAccountAmount</span><span style="color:#24292E;">(madHatter, madHatterAsset).</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">$madHatterAsset</span><span style="color:#032F62;"> BALANCE: </span><span style="color:#005CC5;">$it</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">) }</span></span>
<span class="line"><span style="color:#24292E;">    query.</span><span style="color:#6F42C1;">getAccountAmount</span><span style="color:#24292E;">(whiteRabbit, whiteRabbitAsset).</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">$whiteRabbitAsset</span><span style="color:#032F62;"> BALANCE: </span><span style="color:#005CC5;">$it</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">) }</span></span></code></pre></div><p>In the <code>sendTransaction</code> class, add a method for transferring assets.</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">suspend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transferAsset</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        from: </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">Int</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        to: </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        admin: </span><span style="color:#B392F0;">AccountId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.admin,</span></span>
<span class="line"><span style="color:#E1E4E8;">        keyPair: </span><span style="color:#B392F0;">KeyPair</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.keyPair</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">sendTransaction</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(admin)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">transferAsset</span><span style="color:#E1E4E8;">(from.</span><span style="color:#B392F0;">asAssetId</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">value</span><span style="color:#E1E4E8;">, to.</span><span style="color:#B392F0;">asAssetId</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(keyPair)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }.</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">withTimeout</span><span style="color:#E1E4E8;">(timeout) { it.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">() }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">suspend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fun</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transferAsset</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        from: </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">value</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">Int</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        to: </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        admin: </span><span style="color:#6F42C1;">AccountId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.admin,</span></span>
<span class="line"><span style="color:#24292E;">        keyPair: </span><span style="color:#6F42C1;">KeyPair</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.keyPair</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">sendTransaction</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(admin)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">transferAsset</span><span style="color:#24292E;">(from.</span><span style="color:#6F42C1;">asAssetId</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">value</span><span style="color:#24292E;">, to.</span><span style="color:#6F42C1;">asAssetId</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(keyPair)</span></span>
<span class="line"><span style="color:#24292E;">        }.</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">withTimeout</span><span style="color:#24292E;">(timeout) { it.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">() }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>To check the result of the asset transfer, add the <code>getAccountAmount()</code> method to the <code>Query</code> class:</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">suspend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAccountAmount</span><span style="color:#E1E4E8;">(accountId: </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">, assetId: </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">): </span><span style="color:#B392F0;">Long</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> QueryBuilder.</span><span style="color:#B392F0;">findAccountById</span><span style="color:#E1E4E8;">(accountId.</span><span style="color:#B392F0;">asAccountId</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(admin)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(keyPair)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">let</span><span style="color:#E1E4E8;"> { query </span><span style="color:#F97583;">-&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                client.</span><span style="color:#B392F0;">sendQuery</span><span style="color:#E1E4E8;">(query).assets[assetId.</span><span style="color:#B392F0;">asAssetId</span><span style="color:#E1E4E8;">()]?.</span><span style="color:#F97583;">value</span></span>
<span class="line"><span style="color:#E1E4E8;">            }.</span><span style="color:#B392F0;">let</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">value</span><span style="color:#E1E4E8;">?.</span><span style="color:#B392F0;">cast</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">AssetValue</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Quantity</span><span style="color:#E1E4E8;">&gt;()?.u32</span></span>
<span class="line"><span style="color:#E1E4E8;">            } ?: </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NOT FOUND&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">suspend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fun</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAccountAmount</span><span style="color:#24292E;">(accountId: </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">, assetId: </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">): </span><span style="color:#6F42C1;">Long</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> QueryBuilder.</span><span style="color:#6F42C1;">findAccountById</span><span style="color:#24292E;">(accountId.</span><span style="color:#6F42C1;">asAccountId</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(admin)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(keyPair)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">let</span><span style="color:#24292E;"> { query </span><span style="color:#D73A49;">-&gt;</span></span>
<span class="line"><span style="color:#24292E;">                client.</span><span style="color:#6F42C1;">sendQuery</span><span style="color:#24292E;">(query).assets[assetId.</span><span style="color:#6F42C1;">asAssetId</span><span style="color:#24292E;">()]?.</span><span style="color:#D73A49;">value</span></span>
<span class="line"><span style="color:#24292E;">            }.</span><span style="color:#6F42C1;">let</span><span style="color:#24292E;"> { </span><span style="color:#D73A49;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-&gt;</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">value</span><span style="color:#24292E;">?.</span><span style="color:#6F42C1;">cast</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">AssetValue</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Quantity</span><span style="color:#24292E;">&gt;()?.u32</span></span>
<span class="line"><span style="color:#24292E;">            } ?: </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NOT FOUND&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><p>The console output should contain similar information.</p><details class="details custom-block"><summary>Expand to see the expected output</summary><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">DOMAIN looking_glass_1684843200289 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ALL DOMAINS: [looking_glass, garden_of_live_flowers, genesis, looking_glass_1684843200289, looking_glass_1684842996549, wonderland, looking_glass_1684835731653]</span></span>
<span class="line"><span style="color:#e1e4e8;">ACCOUNT madHatter_1684843202389@looking_glass_1684843200289 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ALL ACCOUNTS: [carpenter@garden_of_live_flowers, genesis@genesis, madHatter_1684843202389@looking_glass_1684843200289, madHatter_1684842997930@looking_glass_1684842996549, alice@wonderland, bob@wonderland, madHatter_1684835733686@looking_glass_1684835731653]</span></span>
<span class="line"><span style="color:#e1e4e8;">ASSET DEFINITION asset_time_1684843203337#looking_glass_1684843200289 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ASSET asset_time_1684843203337#looking_glass_1684843200289#madHatter_1684843202389@looking_glass_1684843200289 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ACCOUNT whiteRabbit_1684843205383@looking_glass_1684843200289 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ASSET asset_time_1684843203337#looking_glass_1684843200289#whiteRabbit_1684843205383@looking_glass_1684843200289 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">madHatter_1684843202389@looking_glass_1684843200289 TRANSFERRED FROM asset_time_1684843203337#looking_glass_1684843200289#madHatter_1684843202389@looking_glass_1684843200289 TO asset_time_1684843203337#looking_glass_1684843200289#whiteRabbit_1684843205383@looking_glass_1684843200289: 10</span></span>
<span class="line"><span style="color:#e1e4e8;">asset_time_1684843203337#looking_glass_1684843200289#madHatter_1684843202389@looking_glass_1684843200289 BALANCE: 90</span></span>
<span class="line"><span style="color:#e1e4e8;">asset_time_1684843203337#looking_glass_1684843200289#whiteRabbit_1684843205383@looking_glass_1684843200289 BALANCE: 10</span></span>
<span class="line"><span style="color:#e1e4e8;">ALL ASSETS: [asset_time_1684843203337#looking_glass_1684843200289#madHatter_1684843202389@looking_glass_1684843200289, cabbage#garden_of_live_flowers#alice@wonderland, rose#wonderland#alice@wonderland]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">DOMAIN looking_glass_1684843200289 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ALL DOMAINS: [looking_glass, garden_of_live_flowers, genesis, looking_glass_1684843200289, looking_glass_1684842996549, wonderland, looking_glass_1684835731653]</span></span>
<span class="line"><span style="color:#24292e;">ACCOUNT madHatter_1684843202389@looking_glass_1684843200289 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ALL ACCOUNTS: [carpenter@garden_of_live_flowers, genesis@genesis, madHatter_1684843202389@looking_glass_1684843200289, madHatter_1684842997930@looking_glass_1684842996549, alice@wonderland, bob@wonderland, madHatter_1684835733686@looking_glass_1684835731653]</span></span>
<span class="line"><span style="color:#24292e;">ASSET DEFINITION asset_time_1684843203337#looking_glass_1684843200289 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ASSET asset_time_1684843203337#looking_glass_1684843200289#madHatter_1684843202389@looking_glass_1684843200289 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ACCOUNT whiteRabbit_1684843205383@looking_glass_1684843200289 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ASSET asset_time_1684843203337#looking_glass_1684843200289#whiteRabbit_1684843205383@looking_glass_1684843200289 CREATED</span></span>
<span class="line"><span style="color:#24292e;">madHatter_1684843202389@looking_glass_1684843200289 TRANSFERRED FROM asset_time_1684843203337#looking_glass_1684843200289#madHatter_1684843202389@looking_glass_1684843200289 TO asset_time_1684843203337#looking_glass_1684843200289#whiteRabbit_1684843205383@looking_glass_1684843200289: 10</span></span>
<span class="line"><span style="color:#24292e;">asset_time_1684843203337#looking_glass_1684843200289#madHatter_1684843202389@looking_glass_1684843200289 BALANCE: 90</span></span>
<span class="line"><span style="color:#24292e;">asset_time_1684843203337#looking_glass_1684843200289#whiteRabbit_1684843205383@looking_glass_1684843200289 BALANCE: 10</span></span>
<span class="line"><span style="color:#24292e;">ALL ASSETS: [asset_time_1684843203337#looking_glass_1684843200289#madHatter_1684843202389@looking_glass_1684843200289, cabbage#garden_of_live_flowers#alice@wonderland, rose#wonderland#alice@wonderland]</span></span></code></pre></div></details><h2 id="_7-burning-assets" tabindex="-1">7. Burning assets <a class="header-anchor" href="#_7-burning-assets" aria-label="Permalink to &quot;7. Burning assets&quot;">​</a></h2><p>Burning assets is quite similar to minting them. To get started, let&#39;s add the following lines to the <code>main()</code> method:</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">sendTransaction.</span><span style="color:#B392F0;">burnAssets</span><span style="color:#E1E4E8;">(madHatterAsset, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, madHatter.</span><span style="color:#B392F0;">asAccountId</span><span style="color:#E1E4E8;">(), madHatterKeyPair)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;\${madHatterAsset} WAS BURN&quot;</span><span style="color:#E1E4E8;">) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    query.</span><span style="color:#B392F0;">getAccountAmount</span><span style="color:#E1E4E8;">(madHatter, madHatterAsset)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> { </span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">$madHatterAsset</span><span style="color:#9ECBFF;"> BALANCE: </span><span style="color:#79B8FF;">$it</span><span style="color:#9ECBFF;"> AFTER ASSETS BURNING&quot;</span><span style="color:#E1E4E8;">) }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">sendTransaction.</span><span style="color:#6F42C1;">burnAssets</span><span style="color:#24292E;">(madHatterAsset, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, madHatter.</span><span style="color:#6F42C1;">asAccountId</span><span style="color:#24292E;">(), madHatterKeyPair)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;\${madHatterAsset} WAS BURN&quot;</span><span style="color:#24292E;">) }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    query.</span><span style="color:#6F42C1;">getAccountAmount</span><span style="color:#24292E;">(madHatter, madHatterAsset)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> { </span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;</span><span style="color:#005CC5;">$madHatterAsset</span><span style="color:#032F62;"> BALANCE: </span><span style="color:#005CC5;">$it</span><span style="color:#032F62;"> AFTER ASSETS BURNING&quot;</span><span style="color:#24292E;">) }</span></span></code></pre></div><p>Then implement a wrapper over the <code>burnAssets()</code> method in the <code>sendTransaction</code> class:</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">suspend</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">fun</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">burnAssets</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        assetId: </span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">Int</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        admin: </span><span style="color:#B392F0;">AccountId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.admin,</span></span>
<span class="line"><span style="color:#E1E4E8;">        keyPair: </span><span style="color:#B392F0;">KeyPair</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.keyPair</span></span>
<span class="line"><span style="color:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">sendTransaction</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(admin)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">burnAsset</span><span style="color:#E1E4E8;">(assetId.</span><span style="color:#B392F0;">asAssetId</span><span style="color:#E1E4E8;">(), </span><span style="color:#F97583;">value</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(keyPair)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }.</span><span style="color:#B392F0;">also</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">withTimeout</span><span style="color:#E1E4E8;">(timeout) { it.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">() }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">suspend</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">fun</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">burnAssets</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        assetId: </span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">value</span><span style="color:#24292E;">: </span><span style="color:#6F42C1;">Int</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        admin: </span><span style="color:#6F42C1;">AccountId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.admin,</span></span>
<span class="line"><span style="color:#24292E;">        keyPair: </span><span style="color:#6F42C1;">KeyPair</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.keyPair</span></span>
<span class="line"><span style="color:#24292E;">    ) {</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">sendTransaction</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(admin)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">burnAsset</span><span style="color:#24292E;">(assetId.</span><span style="color:#6F42C1;">asAssetId</span><span style="color:#24292E;">(), </span><span style="color:#D73A49;">value</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(keyPair)</span></span>
<span class="line"><span style="color:#24292E;">        }.</span><span style="color:#6F42C1;">also</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">withTimeout</span><span style="color:#24292E;">(timeout) { it.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">() }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><details class="details custom-block"><summary>Expand to see the expected output</summary><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">DOMAIN looking_glass_1684843511587 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ALL DOMAINS: [looking_glass, garden_of_live_flowers, looking_glass_1684843344208, genesis, looking_glass_1684843200289, looking_glass_1684842996549, wonderland, looking_glass_1684843511587, looking_glass_1684843451130, looking_glass_1684835731653]</span></span>
<span class="line"><span style="color:#e1e4e8;">ACCOUNT madHatter_1684843513272@looking_glass_1684843511587 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ALL ACCOUNTS: [carpenter@garden_of_live_flowers, madHatter_1684843345604@looking_glass_1684843344208, whiteRabbit_1684843348692@looking_glass_1684843344208, genesis@genesis, madHatter_1684835733686@looking_glass_1684835731653]</span></span>
<span class="line"><span style="color:#e1e4e8;">ASSET DEFINITION asset_time_1684843514251#looking_glass_1684843511587 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ASSET asset_time_1684843514251#looking_glass_1684843511587#madHatter_1684843513272@looking_glass_1684843511587 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ACCOUNT whiteRabbit_1684843516303@looking_glass_1684843511587 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">ASSET asset_time_1684843514251#looking_glass_1684843511587#whiteRabbit_1684843516303@looking_glass_1684843511587 CREATED</span></span>
<span class="line"><span style="color:#e1e4e8;">madHatter_1684843513272@looking_glass_1684843511587 TRANSFERRED FROM asset_time_1684843514251#looking_glass_1684843511587#madHatter_1684843513272@looking_glass_1684843511587 TO asset_time_1684843514251#looking_glass_1684843511587#whiteRabbit_1684843516303@looking_glass_1684843511587: 10</span></span>
<span class="line"><span style="color:#e1e4e8;">asset_time_1684843514251#looking_glass_1684843511587#madHatter_1684843513272@looking_glass_1684843511587 BALANCE: 90</span></span>
<span class="line"><span style="color:#e1e4e8;">asset_time_1684843514251#looking_glass_1684843511587#whiteRabbit_1684843516303@looking_glass_1684843511587 BALANCE: 10</span></span>
<span class="line"><span style="color:#e1e4e8;">asset_time_1684843514251#looking_glass_1684843511587#madHatter_1684843513272@looking_glass_1684843511587 WAS BURN</span></span>
<span class="line"><span style="color:#e1e4e8;">asset_time_1684843514251#looking_glass_1684843511587#madHatter_1684843513272@looking_glass_1684843511587 BALANCE: 80 AFTER ASSETS BURNING</span></span>
<span class="line"><span style="color:#e1e4e8;">ALL ASSETS: [asset_time_1684843514251#looking_glass_1684843511587#whiteRabbit_1684843516303@looking_glass_1684843511587, asset_time_1684843454049#looking_glass_1684843451130#madHatter_1684843453085@looking_glass_1684843451130, asset_time_1684843454049#looking_glass_1684843451130#whiteRabbit_1684843456091@looking_glass_1684843451130]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">DOMAIN looking_glass_1684843511587 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ALL DOMAINS: [looking_glass, garden_of_live_flowers, looking_glass_1684843344208, genesis, looking_glass_1684843200289, looking_glass_1684842996549, wonderland, looking_glass_1684843511587, looking_glass_1684843451130, looking_glass_1684835731653]</span></span>
<span class="line"><span style="color:#24292e;">ACCOUNT madHatter_1684843513272@looking_glass_1684843511587 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ALL ACCOUNTS: [carpenter@garden_of_live_flowers, madHatter_1684843345604@looking_glass_1684843344208, whiteRabbit_1684843348692@looking_glass_1684843344208, genesis@genesis, madHatter_1684835733686@looking_glass_1684835731653]</span></span>
<span class="line"><span style="color:#24292e;">ASSET DEFINITION asset_time_1684843514251#looking_glass_1684843511587 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ASSET asset_time_1684843514251#looking_glass_1684843511587#madHatter_1684843513272@looking_glass_1684843511587 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ACCOUNT whiteRabbit_1684843516303@looking_glass_1684843511587 CREATED</span></span>
<span class="line"><span style="color:#24292e;">ASSET asset_time_1684843514251#looking_glass_1684843511587#whiteRabbit_1684843516303@looking_glass_1684843511587 CREATED</span></span>
<span class="line"><span style="color:#24292e;">madHatter_1684843513272@looking_glass_1684843511587 TRANSFERRED FROM asset_time_1684843514251#looking_glass_1684843511587#madHatter_1684843513272@looking_glass_1684843511587 TO asset_time_1684843514251#looking_glass_1684843511587#whiteRabbit_1684843516303@looking_glass_1684843511587: 10</span></span>
<span class="line"><span style="color:#24292e;">asset_time_1684843514251#looking_glass_1684843511587#madHatter_1684843513272@looking_glass_1684843511587 BALANCE: 90</span></span>
<span class="line"><span style="color:#24292e;">asset_time_1684843514251#looking_glass_1684843511587#whiteRabbit_1684843516303@looking_glass_1684843511587 BALANCE: 10</span></span>
<span class="line"><span style="color:#24292e;">asset_time_1684843514251#looking_glass_1684843511587#madHatter_1684843513272@looking_glass_1684843511587 WAS BURN</span></span>
<span class="line"><span style="color:#24292e;">asset_time_1684843514251#looking_glass_1684843511587#madHatter_1684843513272@looking_glass_1684843511587 BALANCE: 80 AFTER ASSETS BURNING</span></span>
<span class="line"><span style="color:#24292e;">ALL ASSETS: [asset_time_1684843514251#looking_glass_1684843511587#whiteRabbit_1684843516303@looking_glass_1684843511587, asset_time_1684843454049#looking_glass_1684843451130#madHatter_1684843453085@looking_glass_1684843451130, asset_time_1684843454049#looking_glass_1684843451130#whiteRabbit_1684843456091@looking_glass_1684843451130]</span></span></code></pre></div></details><h2 id="_8-visualizing-outputs" tabindex="-1">8. Visualizing outputs <a class="header-anchor" href="#_8-visualizing-outputs" aria-label="Permalink to &quot;8. Visualizing outputs&quot;">​</a></h2><p>Finally, we should talk about visualising data. The Rust API is currently the most complete in terms of available queries and instructions. After all, this is the language in which Iroha 2 was built. Kotlin, by contrast, supports only some features.</p><p>There are two possible event filters: <code>PipelineEventFilter</code> and <code>DataEventFilter</code>, we shall focus on the former. This filter sieves events pertaining to the process of submitting a transaction, executing a transaction and committing it to a block.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.datamodel.events.EventFilter.Pipeline</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.datamodel.events.pipeline.EventFilter</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.datamodel.events.pipeline.EntityType.Transaction</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">jp.co.soramitsu.iroha2.generated.crypto.hash.Hash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> hash: </span><span style="color:#B392F0;">ByteArray</span></span>
<span class="line"><span style="color:#F97583;">val</span><span style="color:#E1E4E8;"> eventFilter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Pipeline</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">EventFilter</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Transaction</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">Hash</span><span style="color:#E1E4E8;">(hash)))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.datamodel.events.EventFilter.Pipeline</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.datamodel.events.pipeline.EventFilter</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.datamodel.events.pipeline.EntityType.Transaction</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">jp.co.soramitsu.iroha2.generated.crypto.hash.Hash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">val</span><span style="color:#24292E;"> hash: </span><span style="color:#6F42C1;">ByteArray</span></span>
<span class="line"><span style="color:#D73A49;">val</span><span style="color:#24292E;"> eventFilter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Pipeline</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">EventFilter</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Transaction</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">Hash</span><span style="color:#24292E;">(hash)))</span></span></code></pre></div><p>What this short code snippet does is the following: It creates an event pipeline filter that checks if a transaction with the specified hash was submitted/rejected. This can then be used to see if the transaction we submitted was processed correctly and provide feedback to the end-user.</p><h2 id="_9-samples-in-pure-java" tabindex="-1">9. Samples in pure Java <a class="header-anchor" href="#_9-samples-in-pure-java" aria-label="Permalink to &quot;9. Samples in pure Java&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.client.Iroha2AsyncClient;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.generated.datamodel.Value;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.generated.datamodel.account.Account;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.generated.datamodel.account.AccountId;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.generated.datamodel.asset.AssetId;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.generated.datamodel.asset.AssetValue;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.generated.datamodel.asset.AssetValueType;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.generated.datamodel.domain.Domain;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.generated.datamodel.domain.DomainId;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.generated.datamodel.metadata.Metadata;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.generated.datamodel.name.Name;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.generated.datamodel.transaction.VersionedSignedTransaction;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.query.QueryAndExtractor;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.query.QueryBuilder;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.testengine.DefaultGenesis;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.testengine.IrohaTest;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.testengine.WithIroha;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.transaction.TransactionBuilder;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.Assertions;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.ArrayList;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.HashMap;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.concurrent.CompletableFuture;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.concurrent.ExecutionException;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.concurrent.TimeUnit;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.concurrent.TimeoutException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> jp.co.soramitsu.iroha2.testengine.TestConstsKt.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JavaTest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IrohaTest</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Iroha2AsyncClient</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">WithIroha</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">sources</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">instructionFailed</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> VersionedSignedTransaction transaction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">fail</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;FAIL MESSAGE&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> CompletableFuture&lt;</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[]&gt; future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">sendTransactionAsync</span><span style="color:#E1E4E8;">(transaction);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assertions.</span><span style="color:#B392F0;">assertThrows</span><span style="color:#E1E4E8;">(ExecutionException.class,</span></span>
<span class="line"><span style="color:#E1E4E8;">            () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> future.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getTxTimeout</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSeconds</span><span style="color:#E1E4E8;">(), TimeUnit.SECONDS)</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">WithIroha</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">sources</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerDomainInstructionCommitted</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> ExecutionException, InterruptedException, TimeoutException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> DomainId domainId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DomainId</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;new_domain_name&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> VersionedSignedTransaction transaction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">registerDomain</span><span style="color:#E1E4E8;">(domainId)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">sendTransactionAsync</span><span style="color:#E1E4E8;">(transaction).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getTxTimeout</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSeconds</span><span style="color:#E1E4E8;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> QueryAndExtractor&lt;</span><span style="color:#F97583;">Domain</span><span style="color:#E1E4E8;">&gt; query </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> QueryBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">findDomainById</span><span style="color:#E1E4E8;">(domainId)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> CompletableFuture&lt;</span><span style="color:#F97583;">Domain</span><span style="color:#E1E4E8;">&gt; future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">sendQueryAsync</span><span style="color:#E1E4E8;">(query);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Domain domain </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> future.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getTxTimeout</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSeconds</span><span style="color:#E1E4E8;">(), TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assertions.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(domain.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), domainId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">WithIroha</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">sources</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerAccountInstructionCommitted</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> AccountId accountId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountId</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;new_account&quot;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">            DEFAULT_DOMAIN_ID</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> VersionedSignedTransaction transaction </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">registerAccount</span><span style="color:#E1E4E8;">(accountId, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ArrayList&lt;&gt;())</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">sendTransactionAsync</span><span style="color:#E1E4E8;">(transaction).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getTxTimeout</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSeconds</span><span style="color:#E1E4E8;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> QueryAndExtractor&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; query </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> QueryBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">findAccountById</span><span style="color:#E1E4E8;">(accountId)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> CompletableFuture&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">sendQueryAsync</span><span style="color:#E1E4E8;">(query);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Account account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> future.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getTxTimeout</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSeconds</span><span style="color:#E1E4E8;">(), TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assertions.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(account.</span><span style="color:#B392F0;">getId</span><span style="color:#E1E4E8;">(), accountId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">WithIroha</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">sources</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mintAssetInstructionCommitted</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> VersionedSignedTransaction registerAssetTx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">registerAssetDefinition</span><span style="color:#E1E4E8;">(DEFAULT_ASSET_DEFINITION_ID, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> AssetValueType.</span><span style="color:#B392F0;">Quantity</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">sendTransactionAsync</span><span style="color:#E1E4E8;">(registerAssetTx).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getTxTimeout</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSeconds</span><span style="color:#E1E4E8;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> VersionedSignedTransaction mintAssetTx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">mintAsset</span><span style="color:#E1E4E8;">(DEFAULT_ASSET_ID, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">sendTransactionAsync</span><span style="color:#E1E4E8;">(mintAssetTx).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getTxTimeout</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSeconds</span><span style="color:#E1E4E8;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> QueryAndExtractor&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; query </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> QueryBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">findAccountById</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> CompletableFuture&lt;</span><span style="color:#F97583;">Account</span><span style="color:#E1E4E8;">&gt; future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">sendQueryAsync</span><span style="color:#E1E4E8;">(query);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Account account </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> future.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getTxTimeout</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSeconds</span><span style="color:#E1E4E8;">(), TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> AssetValue value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> account.</span><span style="color:#B392F0;">getAssets</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(DEFAULT_ASSET_ID).</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assertions.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, ((AssetValue.Quantity) value).</span><span style="color:#B392F0;">getU32</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">WithIroha</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">sources</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateKeyValueInstructionCommitted</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Name assetMetadataKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;asset_metadata_key&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Value.String assetMetadataValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Value.</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;some string value&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Value.String assetMetadataValue2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Value.</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;some string value 2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Metadata metadata </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Metadata</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> HashMap&lt;</span><span style="color:#F97583;">Name</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">&gt;() {{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(assetMetadataKey, assetMetadataValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> VersionedSignedTransaction registerAssetTx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">registerAssetDefinition</span><span style="color:#E1E4E8;">(DEFAULT_ASSET_DEFINITION_ID, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> AssetValueType.</span><span style="color:#B392F0;">Store</span><span style="color:#E1E4E8;">(), metadata)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">sendTransactionAsync</span><span style="color:#E1E4E8;">(registerAssetTx).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getTxTimeout</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSeconds</span><span style="color:#E1E4E8;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> AssetId assetId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AssetId</span><span style="color:#E1E4E8;">(DEFAULT_ASSET_DEFINITION_ID, ALICE_ACCOUNT_ID);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> VersionedSignedTransaction keyValueTx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setKeyValue</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                assetId,</span></span>
<span class="line"><span style="color:#E1E4E8;">                assetMetadataKey,</span></span>
<span class="line"><span style="color:#E1E4E8;">                assetMetadataValue2</span></span>
<span class="line"><span style="color:#E1E4E8;">            ).</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">sendTransactionAsync</span><span style="color:#E1E4E8;">(keyValueTx).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> QueryAndExtractor&lt;</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">&gt; assetDefinitionValueQuery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> QueryBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">findAssetKeyValueByIdAndKey</span><span style="color:#E1E4E8;">(assetId, assetMetadataKey)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> CompletableFuture&lt;</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">&gt; future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">sendQueryAsync</span><span style="color:#E1E4E8;">(assetDefinitionValueQuery);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Value value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> future.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assertions.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            ((Value.String) value).</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">            assetMetadataValue2.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">WithIroha</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">sources</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setKeyValueInstructionCommitted</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Value.String assetValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Value.</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;some string value&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Name assetKey </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;asset_metadata_key&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> VersionedSignedTransaction registerAssetTx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">registerAssetDefinition</span><span style="color:#E1E4E8;">(DEFAULT_ASSET_DEFINITION_ID, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> AssetValueType.</span><span style="color:#B392F0;">Store</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">sendTransactionAsync</span><span style="color:#E1E4E8;">(registerAssetTx).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getTxTimeout</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getSeconds</span><span style="color:#E1E4E8;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> VersionedSignedTransaction keyValueTx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">setKeyValue</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                DEFAULT_ASSET_DEFINITION_ID,</span></span>
<span class="line"><span style="color:#E1E4E8;">                assetKey,</span></span>
<span class="line"><span style="color:#E1E4E8;">                assetValue</span></span>
<span class="line"><span style="color:#E1E4E8;">            ).</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#B392F0;">sendTransactionAsync</span><span style="color:#E1E4E8;">(keyValueTx).</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> QueryAndExtractor&lt;</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">&gt; assetDefinitionValueQuery </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> QueryBuilder</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">findAssetDefinitionKeyValueByIdAndKey</span><span style="color:#E1E4E8;">(DEFAULT_ASSET_DEFINITION_ID, assetKey)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">account</span><span style="color:#E1E4E8;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">buildSigned</span><span style="color:#E1E4E8;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> CompletableFuture&lt;</span><span style="color:#F97583;">Value</span><span style="color:#E1E4E8;">&gt; future </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">sendQueryAsync</span><span style="color:#E1E4E8;">(assetDefinitionValueQuery);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Value value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> future.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Assertions.</span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">            ((Value.String) value).</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">            assetValue.</span><span style="color:#B392F0;">getString</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.client.Iroha2AsyncClient;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.generated.datamodel.Value;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.generated.datamodel.account.Account;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.generated.datamodel.account.AccountId;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.generated.datamodel.asset.AssetId;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.generated.datamodel.asset.AssetValue;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.generated.datamodel.asset.AssetValueType;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.generated.datamodel.domain.Domain;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.generated.datamodel.domain.DomainId;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.generated.datamodel.metadata.Metadata;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.generated.datamodel.name.Name;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.generated.datamodel.transaction.VersionedSignedTransaction;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.query.QueryAndExtractor;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.query.QueryBuilder;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.testengine.DefaultGenesis;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.testengine.IrohaTest;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.testengine.WithIroha;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.transaction.TransactionBuilder;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.Assertions;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.Test;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.ArrayList;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.HashMap;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.concurrent.CompletableFuture;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.concurrent.ExecutionException;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.concurrent.TimeUnit;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.concurrent.TimeoutException;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> jp.co.soramitsu.iroha2.testengine.TestConstsKt.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JavaTest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IrohaTest</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Iroha2AsyncClient</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">WithIroha</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">sources</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">instructionFailed</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> VersionedSignedTransaction transaction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">fail</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;FAIL MESSAGE&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> CompletableFuture&lt;</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[]&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">sendTransactionAsync</span><span style="color:#24292E;">(transaction);</span></span>
<span class="line"><span style="color:#24292E;">        Assertions.</span><span style="color:#6F42C1;">assertThrows</span><span style="color:#24292E;">(ExecutionException.class,</span></span>
<span class="line"><span style="color:#24292E;">            () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> future.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getTxTimeout</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSeconds</span><span style="color:#24292E;">(), TimeUnit.SECONDS)</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">WithIroha</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">sources</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerDomainInstructionCommitted</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> ExecutionException, InterruptedException, TimeoutException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> DomainId domainId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DomainId</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;new_domain_name&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> VersionedSignedTransaction transaction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">registerDomain</span><span style="color:#24292E;">(domainId)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">sendTransactionAsync</span><span style="color:#24292E;">(transaction).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getTxTimeout</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSeconds</span><span style="color:#24292E;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> QueryAndExtractor&lt;</span><span style="color:#D73A49;">Domain</span><span style="color:#24292E;">&gt; query </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> QueryBuilder</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">findDomainById</span><span style="color:#24292E;">(domainId)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> CompletableFuture&lt;</span><span style="color:#D73A49;">Domain</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">sendQueryAsync</span><span style="color:#24292E;">(query);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Domain domain </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> future.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getTxTimeout</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSeconds</span><span style="color:#24292E;">(), TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#24292E;">        Assertions.</span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(domain.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), domainId);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">WithIroha</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">sources</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerAccountInstructionCommitted</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> AccountId accountId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountId</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;new_account&quot;</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">            DEFAULT_DOMAIN_ID</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> VersionedSignedTransaction transaction </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">registerAccount</span><span style="color:#24292E;">(accountId, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ArrayList&lt;&gt;())</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">sendTransactionAsync</span><span style="color:#24292E;">(transaction).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getTxTimeout</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSeconds</span><span style="color:#24292E;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> QueryAndExtractor&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; query </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> QueryBuilder</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">findAccountById</span><span style="color:#24292E;">(accountId)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> CompletableFuture&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">sendQueryAsync</span><span style="color:#24292E;">(query);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Account account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> future.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getTxTimeout</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSeconds</span><span style="color:#24292E;">(), TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#24292E;">        Assertions.</span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(account.</span><span style="color:#6F42C1;">getId</span><span style="color:#24292E;">(), accountId);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">WithIroha</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">sources</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mintAssetInstructionCommitted</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> VersionedSignedTransaction registerAssetTx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">registerAssetDefinition</span><span style="color:#24292E;">(DEFAULT_ASSET_DEFINITION_ID, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> AssetValueType.</span><span style="color:#6F42C1;">Quantity</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">sendTransactionAsync</span><span style="color:#24292E;">(registerAssetTx).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getTxTimeout</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSeconds</span><span style="color:#24292E;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> VersionedSignedTransaction mintAssetTx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">mintAsset</span><span style="color:#24292E;">(DEFAULT_ASSET_ID, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">sendTransactionAsync</span><span style="color:#24292E;">(mintAssetTx).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getTxTimeout</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSeconds</span><span style="color:#24292E;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> QueryAndExtractor&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; query </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> QueryBuilder</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">findAccountById</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> CompletableFuture&lt;</span><span style="color:#D73A49;">Account</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">sendQueryAsync</span><span style="color:#24292E;">(query);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Account account </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> future.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getTxTimeout</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSeconds</span><span style="color:#24292E;">(), TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> AssetValue value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> account.</span><span style="color:#6F42C1;">getAssets</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(DEFAULT_ASSET_ID).</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        Assertions.</span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, ((AssetValue.Quantity) value).</span><span style="color:#6F42C1;">getU32</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">WithIroha</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">sources</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateKeyValueInstructionCommitted</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Name assetMetadataKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;asset_metadata_key&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Value.String assetMetadataValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Value.</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;some string value&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Value.String assetMetadataValue2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Value.</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;some string value 2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Metadata metadata </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Metadata</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> HashMap&lt;</span><span style="color:#D73A49;">Name</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">&gt;() {{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(assetMetadataKey, assetMetadataValue);</span></span>
<span class="line"><span style="color:#24292E;">        }});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> VersionedSignedTransaction registerAssetTx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">registerAssetDefinition</span><span style="color:#24292E;">(DEFAULT_ASSET_DEFINITION_ID, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> AssetValueType.</span><span style="color:#6F42C1;">Store</span><span style="color:#24292E;">(), metadata)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">sendTransactionAsync</span><span style="color:#24292E;">(registerAssetTx).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getTxTimeout</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSeconds</span><span style="color:#24292E;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> AssetId assetId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AssetId</span><span style="color:#24292E;">(DEFAULT_ASSET_DEFINITION_ID, ALICE_ACCOUNT_ID);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> VersionedSignedTransaction keyValueTx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setKeyValue</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                assetId,</span></span>
<span class="line"><span style="color:#24292E;">                assetMetadataKey,</span></span>
<span class="line"><span style="color:#24292E;">                assetMetadataValue2</span></span>
<span class="line"><span style="color:#24292E;">            ).</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">sendTransactionAsync</span><span style="color:#24292E;">(keyValueTx).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> QueryAndExtractor&lt;</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">&gt; assetDefinitionValueQuery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> QueryBuilder</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">findAssetKeyValueByIdAndKey</span><span style="color:#24292E;">(assetId, assetMetadataKey)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> CompletableFuture&lt;</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">sendQueryAsync</span><span style="color:#24292E;">(assetDefinitionValueQuery);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Value value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> future.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#24292E;">        Assertions.</span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            ((Value.String) value).</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">            assetMetadataValue2.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">WithIroha</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">sources</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> DefaultGenesis.class)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setKeyValueInstructionCommitted</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> Exception {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Value.String assetValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Value.</span><span style="color:#6F42C1;">String</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;some string value&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Name assetKey </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;asset_metadata_key&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> VersionedSignedTransaction registerAssetTx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">registerAssetDefinition</span><span style="color:#24292E;">(DEFAULT_ASSET_DEFINITION_ID, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> AssetValueType.</span><span style="color:#6F42C1;">Store</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">sendTransactionAsync</span><span style="color:#24292E;">(registerAssetTx).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getTxTimeout</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getSeconds</span><span style="color:#24292E;">(), TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> VersionedSignedTransaction keyValueTx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TransactionBuilder.Companion</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">setKeyValue</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                DEFAULT_ASSET_DEFINITION_ID,</span></span>
<span class="line"><span style="color:#24292E;">                assetKey,</span></span>
<span class="line"><span style="color:#24292E;">                assetValue</span></span>
<span class="line"><span style="color:#24292E;">            ).</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#6F42C1;">sendTransactionAsync</span><span style="color:#24292E;">(keyValueTx).</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, TimeUnit.SECONDS);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> QueryAndExtractor&lt;</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">&gt; assetDefinitionValueQuery </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> QueryBuilder</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">findAssetDefinitionKeyValueByIdAndKey</span><span style="color:#24292E;">(DEFAULT_ASSET_DEFINITION_ID, assetKey)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">account</span><span style="color:#24292E;">(ALICE_ACCOUNT_ID)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">buildSigned</span><span style="color:#24292E;">(ALICE_KEYPAIR);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> CompletableFuture&lt;</span><span style="color:#D73A49;">Value</span><span style="color:#24292E;">&gt; future </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">sendQueryAsync</span><span style="color:#24292E;">(assetDefinitionValueQuery);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Value value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> future.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, TimeUnit.SECONDS);</span></span>
<span class="line"><span style="color:#24292E;">        Assertions.</span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">            ((Value.String) value).</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">            assetValue.</span><span style="color:#6F42C1;">getString</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,79),c=[t];function r(E,y,i,F,d,u){return n(),a("div",null,c)}const m=s(e,[["render",r]]);export{A as __pageData,m as default};
