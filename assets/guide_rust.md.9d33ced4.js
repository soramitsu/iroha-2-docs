import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.1293becd.js";const h=JSON.parse('{"title":"Rust Guide","description":"","frontmatter":{},"headers":[],"relativePath":"guide/rust.md","filePath":"guide/rust.md","lastUpdated":1695725126000}'),l={name:"guide/rust.md"},e=o(`<h1 id="rust-guide" tabindex="-1">Rust Guide <a class="header-anchor" href="#rust-guide" aria-label="Permalink to &quot;Rust Guide&quot;">​</a></h1><h2 id="_1-iroha-2-client-setup" tabindex="-1">1. Iroha 2 Client Setup <a class="header-anchor" href="#_1-iroha-2-client-setup" aria-label="Permalink to &quot;1. Iroha 2 Client Setup&quot;">​</a></h2><p>In this part we shall cover the process of using the Iroha 2 Rust libraries. Instead of providing the complete basics, we shall assume knowledge of the most widely used concepts, explain what&#39;s unusual about Iroha 2 specifically, and provide a step-by-step guide to creating your own Rust client for it.</p><p>We assume that you know how to create a new package and have basic understanding of the fundamental Rust code; <code>async</code> functions, <code>enum</code> types, traits and borrowing/ownership, as well as the libraries that we use: <code>serde</code>, <code>tokio</code>, <code>tracing</code>, etc.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you don&#39;t feel comfortable with any of the above, we recommend consulting <a href="https://doc.rust-lang.org/stable/book/" target="_blank" rel="noreferrer">the Rust book</a> and <a href="https://docs.rs/" target="_blank" rel="noreferrer">docs.rs</a>.</p></div><p>Iroha 2 makes extensive use of <a href="https://doc.rust-lang.org/book/ch14-03-cargo-workspaces.html" target="_blank" rel="noreferrer">workspaces</a>. Currently, there are two workspaces, the one that contains the WASM support library and the one that contains the core support libraries, which go in a domain-first order. What that means is that instead of having a global <em>constants</em> crate, we have a crate for the blockchain data model (<code>iroha_data_model</code>), a crate with cryptographic primitives (<code>iroha_crypto</code>), and so on. These, <em>individually</em>, have a module for constants.</p><p>If you add <code>iroha_client</code> to the other two crates, you get the minimum number of dependencies to start your own client, similar to <code>iroha_client_cli</code>.</p><p>Once the initial <code>v2.0.0</code> release is complete, we plan to create a package on <a href="https://crates.io/" target="_blank" rel="noreferrer">crates.io</a> with all the documentation. In the meantime, you could use the local copy that you&#39;ve just created in the <a href="/iroha-2-docs/guide/build.html">previous step</a> as a local installation in your client&#39;s <code>Cargo.toml</code>:</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">dependencies</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">iroha_client = { version = </span><span style="color:#9ECBFF;">&quot;=2.0.0-pre-rc.13&quot;</span><span style="color:#E1E4E8;">, path = </span><span style="color:#9ECBFF;">&quot;~/Git/iroha/client&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">iroha_data_model = { version = </span><span style="color:#9ECBFF;">&quot;=2.0.0-pre-rc.13&quot;</span><span style="color:#E1E4E8;">, path = </span><span style="color:#9ECBFF;">&quot;~/Git/iroha/data_model&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">iroha_crypto = { version = </span><span style="color:#9ECBFF;">&quot;=2.0.0-pre-rc.13&quot;</span><span style="color:#E1E4E8;">, path = </span><span style="color:#9ECBFF;">&quot;~/Git/iroha/crypto&quot;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">iroha_config = { version = </span><span style="color:#9ECBFF;">&quot;=2.0.0-pre-rc.13&quot;</span><span style="color:#E1E4E8;">, path = </span><span style="color:#9ECBFF;">&quot;~/Git/iroha/config&quot;</span><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[</span><span style="color:#6F42C1;">dependencies</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">iroha_client = { version = </span><span style="color:#032F62;">&quot;=2.0.0-pre-rc.13&quot;</span><span style="color:#24292E;">, path = </span><span style="color:#032F62;">&quot;~/Git/iroha/client&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">iroha_data_model = { version = </span><span style="color:#032F62;">&quot;=2.0.0-pre-rc.13&quot;</span><span style="color:#24292E;">, path = </span><span style="color:#032F62;">&quot;~/Git/iroha/data_model&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">iroha_crypto = { version = </span><span style="color:#032F62;">&quot;=2.0.0-pre-rc.13&quot;</span><span style="color:#24292E;">, path = </span><span style="color:#032F62;">&quot;~/Git/iroha/crypto&quot;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">iroha_config = { version = </span><span style="color:#032F62;">&quot;=2.0.0-pre-rc.13&quot;</span><span style="color:#24292E;">, path = </span><span style="color:#032F62;">&quot;~/Git/iroha/config&quot;</span><span style="color:#24292E;"> }</span></span></code></pre></div><p>The added benefit of using a local copy is that you have access to the minimal BFT network in the form of <code>docker-compose.yml</code>, which allows you to experiment. The drawbacks are mitigated by the fact that Rust links statically by default, so we recommend you experiment with the local set up first.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>You could also make use of our <code>test_network</code> crate, which is available via <a href="https://github.com/hyperledger/iroha/tree/iroha2/core/test_network" target="_blank" rel="noreferrer">GitHub</a> but not via crates.io.</p></div><p>You would also benefit from having immediate access to the example configurations in the <code>~/Git/iroha/configs</code> folder.</p><p>So let&#39;s copy the example client configuration somewhere useful:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-vfr</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/Git/iroha/configs/client/config.json</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">example/config.json</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cp</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-vfr</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/Git/iroha/configs/client/config.json</span><span style="color:#24292E;"> </span><span style="color:#032F62;">example/config.json</span></span></code></pre></div><p>We recommend looking through it to familiarise yourself with the key pieces of information that every Iroha 2 client needs. Specifically, each client operates on behalf of a pre-existing account. These accounts are identified by a <em>name@domain_name</em> ID and can only be accessed provided that you know their specific key.</p><h2 id="_2-configuring-iroha-2" tabindex="-1">2. Configuring Iroha 2 <a class="header-anchor" href="#_2-configuring-iroha-2" aria-label="Permalink to &quot;2. Configuring Iroha 2&quot;">​</a></h2><p>Your application written in Rust needs to instantiate a client. The client typically needs specific configuration options, which you could either generate or load from the provided <code>config.json</code>. Let&#39;s do that now:</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iroha_config</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">client</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Configuration</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iroha_data_model</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">TryToValue</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iroha_config</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">client</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Configuration</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iroha_data_model</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">TryToValue</span><span style="color:#24292E;">;</span></span></code></pre></div><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> config_loc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;../configs/client_cli/config.json&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> file </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">File</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(config_loc)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">wrap_err</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Unable to load the configuration file at \`.....\`&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Config file is loading normally.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> config</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Configuration</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">serde_json</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">from_reader</span><span style="color:#E1E4E8;">(file)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">wrap_err</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to parse \`../configs/client_cli/config.json\`&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Verified in tests&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> config_loc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;../configs/client_cli/config.json&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> file </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">File</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(config_loc)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">wrap_err</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Unable to load the configuration file at \`.....\`&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Config file is loading normally.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> config</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Configuration</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">serde_json</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from_reader</span><span style="color:#24292E;">(file)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">wrap_err</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to parse \`../configs/client_cli/config.json\`&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Verified in tests&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><p>Using said configuration, instantiate a client:</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Create an Iroha client</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> iroha_client</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Client</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">config)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Create an Iroha client</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> iroha_client</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Client</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">config)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Note that it used to be necessary to create a mutable client. Sending and receiving messages affects the client&#39;s internal state, but now that state is hidden behind interior mutable smart pointers.</p><p>Of course, depending on your application, you might want to de-serialise your <code>ClientConfiguration</code> structure from a different location. Perhaps, you might want to build the configuration in place using the command-line arguments, or perhaps, you&#39;re using the <a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-0.6.html" target="_blank" rel="noreferrer">XDG specification</a> to store the file persistently in a different location. For this purpose, it&#39;s useful to try and construct an instance of <code>ClientConfiguration</code>:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iroha_core</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">prelude</span><span style="color:#F97583;">::*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iroha_data_model</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">prelude</span><span style="color:#F97583;">::*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> kp </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KeyPair</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">PublicKey</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">from_str</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">r#&quot;ed01207233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;#</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">PrivateKey</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">from_hex</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">Algorithm</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Ed25519</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;9ac47abf59b356e0bd7dcbbbb4dec080e302156a48ca907e47cb6aea1d32719e7233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> (public_key, private_key) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> kp</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> account_id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;alice@wonderland&quot;</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> config </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ClientConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    public_key,</span></span>
<span class="line"><span style="color:#E1E4E8;">    private_key,</span></span>
<span class="line"><span style="color:#E1E4E8;">    account_id,</span></span>
<span class="line"><span style="color:#E1E4E8;">    torii_api_url</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SmallStr</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">from_string</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">iroha_config</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">torii</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">uri</span><span style="color:#F97583;">::</span><span style="color:#79B8FF;">DEFAULT_API_URL</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">to_owned</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">..</span><span style="color:#B392F0;">ClientConfiguration</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iroha_core</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">prelude</span><span style="color:#D73A49;">::*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iroha_data_model</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">prelude</span><span style="color:#D73A49;">::*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> kp </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KeyPair</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">PublicKey</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from_str</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">r#&quot;ed01207233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;#</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    )</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">PrivateKey</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from_hex</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Algorithm</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Ed25519</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;9ac47abf59b356e0bd7dcbbbb4dec080e302156a48ca907e47cb6aea1d32719e7233bfc89dcbd68c19fde6ce6158225298ec1131b6a130d1aeb454c1ab5183c0&quot;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    )</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> (public_key, private_key) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> kp</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">clone</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> account_id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;alice@wonderland&quot;</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> config </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ClientConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    public_key,</span></span>
<span class="line"><span style="color:#24292E;">    private_key,</span></span>
<span class="line"><span style="color:#24292E;">    account_id,</span></span>
<span class="line"><span style="color:#24292E;">    torii_api_url</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SmallStr</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from_string</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">iroha_config</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">torii</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">uri</span><span style="color:#D73A49;">::</span><span style="color:#005CC5;">DEFAULT_API_URL</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">to_owned</span><span style="color:#24292E;">()),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">..</span><span style="color:#6F42C1;">ClientConfiguration</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Note that the keys in <a href="/iroha-2-docs/guide/configure/client-configuration.html">client configuration</a> are given in <a href="https://github.com/multiformats/multihash" target="_blank" rel="noreferrer">multi-hash format</a>. If you are experiencing issues parsing the keys in this format, <a href="/iroha-2-docs/guide/troubleshooting/configuration-issues.html#multihash-format-of-private-and-public-keys">check the troubleshooting section</a>.</p></div><h2 id="_3-registering-a-domain" tabindex="-1">3. Registering a Domain <a class="header-anchor" href="#_3-registering-a-domain" aria-label="Permalink to &quot;3. Registering a Domain&quot;">​</a></h2><p>Registering a domain is a relatively easy operation. Most of the boilerplate code has to do with setting up the Iroha 2 client and deserialising its configuration.</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iroha_client</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">client</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Client</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iroha_data_model</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">metadata</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">UnlimitedMetadata</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">prelude</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">Domain</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">DomainId</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">Instruction</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">RegisterBox</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iroha_client</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">client</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Client</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iroha_data_model</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">metadata</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">UnlimitedMetadata</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">prelude</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">Domain</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">DomainId</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">Instruction</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">RegisterBox</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>To register a domain, you need the domain name:</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Create a domain Id</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> looking_glass</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DomainId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;looking_glass&quot;</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Create a domain Id</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> looking_glass</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DomainId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;looking_glass&quot;</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Which we convert into an instruction:</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Create an ISI</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> create_looking_glass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RegisterBox</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">Domain</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(looking_glass));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Create an ISI</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> create_looking_glass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RegisterBox</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">Domain</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(looking_glass));</span></span></code></pre></div><p>Note that we use <code>RegisterBox</code> and <code>IdentifiableBox</code>. Despite what your instincts as a Rust developer might suggest, we&#39;re not actually using any kind of dynamic dispatch. There&#39;s no <code>dyn</code> anywhere, and <code>RegisterBox</code> isn&#39;t an alias for <code>Box&lt;dyn Register&gt;</code>.</p><p>A <code>RegisterBox</code> is a specialised <code>enum</code> that uses static dispatch to achieve what looks like dynamic dispatch, without any heap allocation. If you want to add more types to <code>RegisterBox</code> you must either open an issue on GitHub, or do that by yourself on a local fork of Iroha.</p><p>The instruction is then batched into a transaction:</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Prepare a transaction</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> metadata </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UnlimitedMetadata</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> instructions</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vec</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Instruction</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">vec!</span><span style="color:#E1E4E8;">[create_looking_glass</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into</span><span style="color:#E1E4E8;">()];</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> tx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> iroha_client</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">build_transaction</span><span style="color:#E1E4E8;">(instructions, metadata)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">wrap_err</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error building a domain registration transaction&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Prepare a transaction</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> metadata </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UnlimitedMetadata</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> instructions</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vec</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">Instruction</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">vec!</span><span style="color:#24292E;">[create_looking_glass</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into</span><span style="color:#24292E;">()];</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> tx </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> iroha_client</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">build_transaction</span><span style="color:#24292E;">(instructions, metadata)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">wrap_err</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error building a domain registration transaction&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Which is then submitted into the pipeline:</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Submit a prepared domain registration transaction</span></span>
<span class="line"><span style="color:#E1E4E8;">iroha_client</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">submit_transaction</span><span style="color:#E1E4E8;">(tx)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">wrap_err</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to submit transaction&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Submit a prepared domain registration transaction</span></span>
<span class="line"><span style="color:#24292E;">iroha_client</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">submit_transaction</span><span style="color:#24292E;">(tx)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">wrap_err</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to submit transaction&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Note the question mark here. This will return an <code>Err</code> variant if there&#39;s something immediately and obviously wrong with the transaction: for example, if it couldn&#39;t submit the transaction to the peer (e.g. there&#39;s no connection), or if the transaction got rejected with an error. The cost is that the <code>submit_transaction</code> function is synchronous.</p><p>We could have also done the following:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iroha_client</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">submit_with_metadata</span><span style="color:#E1E4E8;">(create_looking_glass, </span><span style="color:#B392F0;">UnlimitedMetadata</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">default</span><span style="color:#E1E4E8;">())</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iroha_client</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">submit_with_metadata</span><span style="color:#24292E;">(create_looking_glass, </span><span style="color:#6F42C1;">UnlimitedMetadata</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">default</span><span style="color:#24292E;">())</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span></code></pre></div><p>or</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iroha_client</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">(create_looking_glass)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iroha_client</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(create_looking_glass)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span></code></pre></div><p>The latter style is just syntactic sugar. Every submission comes in the form of a transaction that has metadata.</p><p>While the latter is a convenient shorthand that we shall use frequently, we strongly advise using explicit construction in production code.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>It is likely that we shall replace most if not all instances of <code>submit</code> in our code base with explicit transactions.</p></div><h2 id="_4-registering-an-account" tabindex="-1">4. Registering an Account <a class="header-anchor" href="#_4-registering-an-account" aria-label="Permalink to &quot;4. Registering an Account&quot;">​</a></h2><p>Registering an account is a bit more involved than registering a domain. With a domain, the only concern is the domain name. However, with an account, there are a few more things to worry about.</p><p>First of all, we need to create an <code>AccountId</code>. Note that we can only register an account to an existing domain. The best UX design practices dictate that you should check if the requested domain exists <em>now</em>, and if it doesn&#39;t, suggest a fix to the user. After that, we can create a new account named <em>white_rabbit</em>.</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iroha_data_model</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">account</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountIdStruct</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">prelude</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">AccountId</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Create an \`iroha_data_model::account::Id\` instance</span></span>
<span class="line"><span style="color:#6A737D;">// with a DomainId instance and a Domain ID for an account</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> longhand_account_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountIdStruct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;white_rabbit&quot;</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    domain_id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;looking_glass&quot;</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> account_id</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AccountId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;white_rabbit@looking_glass&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">parse</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">AccountIdStruct</span><span style="color:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Valid, because the string contains no whitespace, has a single &#39;@&#39; character and is not empty after&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Check that two ways to define an account match</span></span>
<span class="line"><span style="color:#B392F0;">assert_eq!</span><span style="color:#E1E4E8;">(account_id, longhand_account_id);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iroha_data_model</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">account</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountIdStruct</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">prelude</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">AccountId</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Create an \`iroha_data_model::account::Id\` instance</span></span>
<span class="line"><span style="color:#6A737D;">// with a DomainId instance and a Domain ID for an account</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> longhand_account_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountIdStruct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;white_rabbit&quot;</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    domain_id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;looking_glass&quot;</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> account_id</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AccountId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;white_rabbit@looking_glass&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">&lt;</span><span style="color:#6F42C1;">AccountIdStruct</span><span style="color:#24292E;">&gt;()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Valid, because the string contains no whitespace, has a single &#39;@&#39; character and is not empty after&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Check that two ways to define an account match</span></span>
<span class="line"><span style="color:#6F42C1;">assert_eq!</span><span style="color:#24292E;">(account_id, longhand_account_id);</span></span></code></pre></div><p>Second, you should provide the account with a public key. It is tempting to generate both it and the private key at this time, but it isn&#39;t the brightest idea. Remember, that <em>the white_rabbit</em> trusts <em>you, alice@wonderland</em>, to create an account for them in the domain _looking_glass, <strong>but doesn&#39;t want you to have access to that account after creation</strong>.</p><p>If you gave <em>white_rabbit</em> a key that you generated yourself, how would they know if you don&#39;t have a copy of their private key? Instead, the best way is to <strong>ask</strong> <em>white_rabbit</em> to generate a new key-pair, and give you the public half of it:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> key</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PublicKey</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">get_key_from_white_rabbit</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> key</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PublicKey</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">get_key_from_white_rabbit</span><span style="color:#24292E;">();</span></span></code></pre></div><p>Only then do we build an instruction from it:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> create_account </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">RegisterBox</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">IdentifiableBox</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">NewAccount</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">with_signatory</span><span style="color:#E1E4E8;">(id, key)));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> create_account </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">RegisterBox</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">IdentifiableBox</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">NewAccount</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">with_signatory</span><span style="color:#24292E;">(id, key)));</span></span></code></pre></div><p>Which is then <strong>wrapped in a transaction</strong> and <strong>submitted to the peer</strong> as <a href="#_3-registering-a-domain">in the previous section</a>.</p><h2 id="_5-registering-and-minting-assets" tabindex="-1">5. Registering and minting assets <a class="header-anchor" href="#_5-registering-and-minting-assets" aria-label="Permalink to &quot;5. Registering and minting assets&quot;">​</a></h2><p>Iroha has been built with few <a href="./blockchain/assets.html">underlying assumptions</a> about what the assets need to be in terms of their value type and characteristics (fungible or non-fungible, mintable or non-mintable).</p><p>To register an asset, we first construct an <code>iroha_data_model::asset::DefinitionId</code> like so:</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Create an asset</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> asset_def_id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AssetDefinitionId</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">from_str</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;time#looking_glass&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">expect</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Valid, because the string contains no whitespace, has a single &#39;#&#39; character and is not empty after&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Create an asset</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> asset_def_id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AssetDefinitionId</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">from_str</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;time#looking_glass&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">expect</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Valid, because the string contains no whitespace, has a single &#39;#&#39; character and is not empty after&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Note that we use <code>#</code> symbol to separate the name of the asset from the domain to which it belongs. This is intentional. This reflects the rule that there can be many <code>alice</code>s in many domains, with only one <code>alice</code> per domain, and there can be an asset that is also named <code>alice</code>, but there can be only one, regardless of type.</p></div><p>Then construct an instruction:</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Initialise the registration time</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> register_time </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">RegisterBox</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">AssetDefinition</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">fixed</span><span style="color:#E1E4E8;">(asset_def_id</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">clone</span><span style="color:#E1E4E8;">())</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">mintable_once</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Submit a registration time</span></span>
<span class="line"><span style="color:#E1E4E8;">iroha_client</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">(register_time)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Initialise the registration time</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> register_time </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">RegisterBox</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">AssetDefinition</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">fixed</span><span style="color:#24292E;">(asset_def_id</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">clone</span><span style="color:#24292E;">())</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">mintable_once</span><span style="color:#24292E;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Submit a registration time</span></span>
<span class="line"><span style="color:#24292E;">iroha_client</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(register_time)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span></code></pre></div><p>This creates an asset <code>time</code> that can only be minted once and has the type <code>fixed</code>. <code>AssetDefinition::fixed</code> just like its other cousins (<code>quantity</code> and <code>big_quantity</code>) returns a builder of an <code>AssetDefinition</code>.</p><p>This asset is <code>mintable_once</code>, which means that the next time we mint it, we have to specify the entire amount that is going to exist for the rest of the existence of the blockchain.</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Create a MintBox using a previous asset and account</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> mint </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MintBox</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">12.34_</span><span style="color:#B392F0;">f64</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">try_to_value</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">IdBox</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">AssetId</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">AssetId</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(asset_def_id, account_id)),</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Submit a minting transaction</span></span>
<span class="line"><span style="color:#E1E4E8;">iroha_client</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">submit_all</span><span style="color:#E1E4E8;">([mint</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">into</span><span style="color:#E1E4E8;">()])</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Create a MintBox using a previous asset and account</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> mint </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MintBox</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">12.34_</span><span style="color:#6F42C1;">f64</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">try_to_value</span><span style="color:#24292E;">()</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">IdBox</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">AssetId</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">AssetId</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(asset_def_id, account_id)),</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Submit a minting transaction</span></span>
<span class="line"><span style="color:#24292E;">iroha_client</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">submit_all</span><span style="color:#24292E;">([mint</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">into</span><span style="color:#24292E;">()])</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Now imagine that the <code>white_rabbit@looking_glass</code> was not very keen and didn&#39;t notice that he wanted <code>123.4_f64</code> as the amount of time. Now white rabbit notices the problem and thinks &quot;oh dear, not a lot of time has passed, perhaps I can give myself some more&quot;, and submits another mint request with <code>111.06_f64</code> instead of the original <code>12.34_f64</code>. But, alas, no such luck. The white rabbit cannot mint more time and is thus perpetually late.</p><p>Roses, by contrast, are already registered in the network during the genesis round, and belong to <em>alice@wonderland</em>. Moreover, when they were registered, we didn&#39;t add the restriction, so we can mint them again and again as <em>alice</em>:</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> mint_roses </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MintBox</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">42_</span><span style="color:#B392F0;">u32</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">to_value</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">IdBox</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">AssetId</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">AssetId</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(roses, alice)),</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> mint_roses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MintBox</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">42_</span><span style="color:#6F42C1;">u32</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">to_value</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">IdBox</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">AssetId</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">AssetId</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(roses, alice)),</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>Then submit the instruction as usual:</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iroha_client</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">(mint_roses)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">.</span><span style="color:#B392F0;">wrap_err</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to submit transaction&quot;</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iroha_client</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(mint_roses)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">wrap_err</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to submit transaction&quot;</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Our assets are strongly typed. As such, when you create a <code>MintBox</code>, you need to check that the asset has the correct underlying type. If you don&#39;t know the type, query it. This is also why we specifically annotate numerical literals with their type.</p><p>Contrary to what you might think, this restriction isn&#39;t just for pedantry. Implicit conversion errors are the bane of all programmers, if you got the <em>AssetValueType</em> incorrect, <em>how do you know that it was the only mistake in that transaction?</em></p></div><h2 id="_6-burning-assets" tabindex="-1">6. Burning assets <a class="header-anchor" href="#_6-burning-assets" aria-label="Permalink to &quot;6. Burning assets&quot;">​</a></h2><p>Burning assets is quite similar to minting. First, you create the burn instruction indicating which asset to burn and its quantity.</p><div class="language-rs vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Burn the Asset instance</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> burn_roses </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BurnBox</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">10_</span><span style="color:#B392F0;">u32</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">to_value</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">IdBox</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">AssetId</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">AssetId</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">new</span><span style="color:#E1E4E8;">(roses, alice)),</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Burn the Asset instance</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> burn_roses </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BurnBox</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">10_</span><span style="color:#6F42C1;">u32</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">to_value</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">IdBox</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">AssetId</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">AssetId</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">new</span><span style="color:#24292E;">(roses, alice)),</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><p>Then submit this instruction:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">iroha_client</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">submit</span><span style="color:#E1E4E8;">(burn_roses)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">iroha_client</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">submit</span><span style="color:#24292E;">(burn_roses)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">;</span></span></code></pre></div><h2 id="_7-visualising-outputs" tabindex="-1">7. Visualising outputs <a class="header-anchor" href="#_7-visualising-outputs" aria-label="Permalink to &quot;7. Visualising outputs&quot;">​</a></h2><p>Finally, we should talk about visualising data. The Rust API is currently the most complete in terms of available queries and instructions. After all, this is the language in which Iroha 2 was built.</p><p>We shall, however, leave most of the aforementioned advanced features down the rabbit hole, up to the reader&#39;s own devices to discover. This document can easily get out of sync with the state of the API features. By contrast, the online documentation is always up to date. Plus a short tutorial wouldn&#39;t be able to do all these features justice. Instead, we shall retain parity with other language tutorials and introduce you to pipeline filters.</p><p>There are two possible event filters: <code>PipelineEventFilter</code> and <code>DataEventFilter</code>, we shall focus on the former. This filter sieves events pertaining to the process of submitting a transaction, executing a transaction, and committing it to a block.</p><p>First, let&#39;s build a filter:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">use</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">iroha_data_model</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">prelude</span><span style="color:#F97583;">::*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> filter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">FilterBox</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">Pipeline</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">PipelineEventFilter</span><span style="color:#F97583;">::</span><span style="color:#B392F0;">identity</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">use</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">iroha_data_model</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">prelude</span><span style="color:#D73A49;">::*</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> filter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">FilterBox</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">Pipeline</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">PipelineEventFilter</span><span style="color:#D73A49;">::</span><span style="color:#6F42C1;">identity</span><span style="color:#24292E;">());</span></span></code></pre></div><p>Then, we start listening for events in an infinite loop:</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> event </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> iroha_client</span><span style="color:#F97583;">.</span><span style="color:#B392F0;">listen_for_events</span><span style="color:#E1E4E8;">(filter)</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">match</span><span style="color:#E1E4E8;"> event {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">Ok</span><span style="color:#E1E4E8;">(event) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Success: {:#?}&quot;</span><span style="color:#E1E4E8;">, event),</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">Err</span><span style="color:#E1E4E8;">(err) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">println!</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Sadness:( {:#?}&quot;</span><span style="color:#E1E4E8;">,  err),</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> event </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> iroha_client</span><span style="color:#D73A49;">.</span><span style="color:#6F42C1;">listen_for_events</span><span style="color:#24292E;">(filter)</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">match</span><span style="color:#24292E;"> event {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Ok</span><span style="color:#24292E;">(event) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Success: {:#?}&quot;</span><span style="color:#24292E;">, event),</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">Err</span><span style="color:#24292E;">(err) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">println!</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Sadness:( {:#?}&quot;</span><span style="color:#24292E;">,  err),</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>Needless to say, an synchronous infinite blocking loop is bad UX for anything but a command-line program, but for illustration purposes, this would create a nice printout, just like in <code>iroha_client_cli</code>.</p>`,86),p=[e];function t(c,r,i,y,E,d){return a(),n("div",null,p)}const F=s(l,[["render",t]]);export{h as __pageData,F as default};
